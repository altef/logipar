# Generated by Haxe 4.0.0-rc.2+77068e10c
# coding: utf-8

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import inspect as python_lib_Inspect


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class Class: pass


class Token:
    _hx_class_name = "Token"
    __slots__ = ("type", "literal")
    _hx_fields = ["type", "literal"]
    _hx_methods = ["precedence", "toString"]

    def __init__(self,_hx_type,literal = None):
        self.type = _hx_type
        self.literal = literal

    def precedence(self):
        tmp = self.type.index
        if ((tmp == 3) or ((tmp == 0))):
            return 2
        elif ((tmp == 2) or ((tmp == 1))):
            return 1
        else:
            return 0

    def toString(self):
        if (self.type == Syntax.LITERAL):
            return (("LITERAL(" + HxOverrides.stringOrNull(self.literal)) + ")")
        return Std.string(self.type)



class Node:
    _hx_class_name = "Node"
    __slots__ = ("token", "left", "right")
    _hx_fields = ["token", "left", "right"]
    _hx_methods = ["toString", "fancyString", "check"]

    def __init__(self,token):
        self.right = None
        self.left = None
        self.token = token

    def toString(self):
        return self.fancyString()

    def fancyString(self,f = None):
        s = None
        if (f is not None):
            s = f(self)
        if (s is not None):
            return s
        tmp = self.token.type.index
        if (tmp == 3):
            return (("NOT(" + Std.string(self.right)) + ")")
        elif (tmp == 6):
            return (("{" + HxOverrides.stringOrNull(self.token.literal)) + "}")
        else:
            return (((((("(" + Std.string(self.left)) + " ") + Std.string(self.token.type)) + " ") + Std.string(self.right)) + ")")

    def check(self,a,f):
        tmp = self.token.type.index
        if (tmp == 0):
            if self.left.check(a,f):
                return self.right.check(a,f)
            else:
                return False
        elif (tmp == 1):
            if (not self.left.check(a,f)):
                return self.right.check(a,f)
            else:
                return True
        elif (tmp == 2):
            l = self.left.check(a,f)
            r = self.right.check(a,f)
            if (not (((not l) and r))):
                if l:
                    return (not r)
                else:
                    return False
            else:
                return True
        elif (tmp == 3):
            return (not self.right.check(a,f))
        elif (tmp == 6):
            return f(a,self.token.literal)
        else:
            raise _HxException("Unexpected token encountered.")


class Syntax(Enum):
    __slots__ = ()
    _hx_class_name = "Syntax"
    _hx_constructs = ["AND", "OR", "XOR", "NOT", "OPEN", "CLOSE", "LITERAL"]
Syntax.AND = Syntax("AND", 0, list())
Syntax.OR = Syntax("OR", 1, list())
Syntax.XOR = Syntax("XOR", 2, list())
Syntax.NOT = Syntax("NOT", 3, list())
Syntax.OPEN = Syntax("OPEN", 4, list())
Syntax.CLOSE = Syntax("CLOSE", 5, list())
Syntax.LITERAL = Syntax("LITERAL", 6, list())


class LogicString:
    _hx_class_name = "LogicString"
    __slots__ = ("logictree", "syntax", "quotations", "caseSensitive")
    _hx_fields = ["logictree", "syntax", "quotations", "caseSensitive"]
    _hx_methods = ["parse", "stringify", "filterFunction", "tree", "shunt", "tentativelyLower", "tokenize", "tokenType", "typeize"]

    def __init__(self,custom_syntax):
        self.logictree = None
        self.caseSensitive = True
        self.quotations = ["\"", "'"]
        _g = haxe_ds_EnumValueMap()
        _g.set(Syntax.AND,"AND")
        _g.set(Syntax.OR,"OR")
        _g.set(Syntax.XOR,"XOR")
        _g.set(Syntax.NOT,"NOT")
        _g.set(Syntax.OPEN,"(")
        _g.set(Syntax.CLOSE,")")
        self.syntax = _g
        key = custom_syntax.keys()
        while key.hasNext():
            key1 = key.next()
            if self.syntax.exists(key1):
                self.syntax.set(key1,custom_syntax.get(key1))

    def parse(self,logic_string):
        print(str(logic_string))
        tokens = self.tokenize(logic_string)
        print(str(tokens))
        types = self.typeize(tokens)
        print(str(types))
        reversepolish = self.shunt(types)
        print(str(reversepolish))
        tree = self.tree(reversepolish)
        self.logictree = tree
        return tree

    def stringify(self,f):
        return self.logictree.fancyString(f)

    def filterFunction(self,f):
        enclosed = self.logictree
        def _hx_local_0(a):
            return enclosed.check(a,f)
        return _hx_local_0

    def tree(self,tokens):
        stack = haxe_ds_GenericStack()
        _g = 0
        _g1 = len(tokens)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            token = (tokens[i] if i >= 0 and i < len(tokens) else None)
            n = Node(token)
            if (token.type != Syntax.LITERAL):
                if (stack.head is None):
                    raise _HxException((("An '" + HxOverrides.stringOrNull(self.syntax.get(token.type))) + "' is missing a value to operate on (on its right)."))
                k = stack.head
                tmp = None
                if (k is None):
                    tmp = None
                else:
                    stack.head = k.next
                    tmp = k.elt
                n.right = tmp
                if (token.type != Syntax.NOT):
                    if (stack.head is None):
                        raise _HxException((("An '" + HxOverrides.stringOrNull(self.syntax.get(token.type))) + "' is missing a value to operate on (on its left)."))
                    k1 = stack.head
                    tmp1 = None
                    if (k1 is None):
                        tmp1 = None
                    else:
                        stack.head = k1.next
                        tmp1 = k1.elt
                    n.left = tmp1
            stack.head = haxe_ds_GenericCell(n,stack.head)
        k2 = stack.head
        parsetree = None
        if (k2 is None):
            parsetree = None
        else:
            stack.head = k2.next
            parsetree = k2.elt
        parsetree1 = parsetree
        if (stack.head is not None):
            print(str(stack))
            raise _HxException("I expected the stack to be empty but it's not!")
        return parsetree1

    def shunt(self,tokens):
        output = list()
        operators = haxe_ds_GenericStack()
        print("Reverse polish:")
        _g = 0
        _g1 = len(tokens)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            print(":::")
            print(str(output))
            print(str(operators))
            token = (tokens[i] if i >= 0 and i < len(tokens) else None)
            tmp = token.type.index
            if (tmp == 4):
                operators.head = haxe_ds_GenericCell(token,operators.head)
            elif (tmp == 5):
                while True:
                    k = operators.head
                    op = None
                    if (k is None):
                        op = None
                    else:
                        operators.head = k.next
                        op = k.elt
                    op1 = op
                    if (op1.type == Syntax.OPEN):
                        break
                    if (operators.head is None):
                        raise _HxException("Mismatched parentheses.")
                    output.append(op1)
            elif (tmp == 6):
                output.append(token)
            else:
                while (operators.head is not None):
                    prev = (None if ((operators.head is None)) else operators.head.elt)
                    if (prev.type == Syntax.OPEN):
                        break
                    if (prev.precedence() <= token.precedence()):
                        break
                    k1 = operators.head
                    x = None
                    if (k1 is None):
                        x = None
                    else:
                        operators.head = k1.next
                        x = k1.elt
                    output.append(x)
                operators.head = haxe_ds_GenericCell(token,operators.head)
        while (operators.head is not None):
            k2 = operators.head
            o = None
            if (k2 is None):
                o = None
            else:
                operators.head = k2.next
                o = k2.elt
            o1 = o
            if (o1.type == Syntax.OPEN):
                raise _HxException("Mismatched parentheses.")
            output.append(o1)
        return output

    def tentativelyLower(self,s):
        if self.caseSensitive:
            return s
        else:
            return Std.string(s).lower()

    def tokenize(self,_hx_str):
        tokens = []
        _g = []
        x = self.syntax.iterator()
        while x.hasNext():
            x1 = x.next()
            x2 = self.tentativelyLower(x1)
            _g.append(x2)
        keys = _g
        quotation = None
        current = ""
        _g1 = 0
        _g2 = len(_hx_str)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(_hx_str))))) else _hx_str[i])
            if (python_internal_ArrayImpl.indexOf(keys,self.tentativelyLower(c),None) == -1):
                if (python_internal_ArrayImpl.indexOf(self.quotations,c,None) != -1):
                    if (quotation is None):
                        quotation = c
                    elif (quotation == c):
                        quotation = None
                if (StringTools.isSpace(c,0) and ((quotation is None))):
                    if (len(current) > 0):
                        tokens.append(current)
                    current = ""
                else:
                    current = (("null" if current is None else current) + ("null" if c is None else c))
            else:
                if (len(current) > 0):
                    tokens.append(current)
                current = ""
                tokens.append(c)
        if (len(StringTools.trim(current)) > 0):
            x3 = StringTools.trim(current)
            tokens.append(x3)
        return tokens

    def tokenType(self,token):
        key = self.syntax.keys()
        while key.hasNext():
            key1 = key.next()
            if (self.tentativelyLower(token) == self.tentativelyLower(self.syntax.get(key1))):
                return Token(key1)
        return Token(Syntax.LITERAL,token)

    def typeize(self,tokens):
        _g = []
        _g1 = 0
        _g2 = len(tokens)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            x = self.tokenType((tokens[i] if i >= 0 and i < len(tokens) else None))
            _g.append(x)
        return _g



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "compare", "isEnumValue"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def compare(a,b):
        if ((a is None) and ((b is None))):
            return 0
        if (a is None):
            return 1
        elif (b is None):
            return -1
        elif HxOverrides.eq(a,b):
            return 0
        elif (a > b):
            return 1
        else:
            return -1

    @staticmethod
    def isEnumValue(v):
        if not HxOverrides.eq(v,Enum):
            return isinstance(v,Enum)
        else:
            return False


class SampleData:
    _hx_class_name = "SampleData"
    __slots__ = ()
    _hx_statics = ["data"]


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["is", "string"]

    @staticmethod
    def _hx_is(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if (t == Dynamic):
            return (v is not None)
        isBool = isinstance(v,bool)
        if ((t == Bool) and isBool):
            return True
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp2 = None
            try:
                tmp2 = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp2 = None
            tmp = (v == tmp2)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        if (t == str):
            return isinstance(v,str)
        isEnumType = (t == Enum)
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = (t == Class)
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp3 = None
        try:
            tmp3 = isinstance(v,t)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp3 = False
        if tmp3:
            return True
        if python_lib_Inspect.isclass(t):
            loop = None
            def _hx_local_1(intf):
                f1 = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f1 is not None):
                    _g = 0
                    while (_g < len(f1)):
                        i = (f1[_g] if _g >= 0 and _g < len(f1) else None)
                        _g = (_g + 1)
                        if HxOverrides.eq(i,t):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            while (currentClass is not None):
                if loop(currentClass):
                    return True
                currentClass = python_Boot.getSuperClass(currentClass)
            return False
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["isSpace", "ltrim", "rtrim", "trim", "replace"]

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))

    @staticmethod
    def replace(s,sub,by):
        _this = (list(s) if ((sub == "")) else s.split(sub))
        return by.join([python_Boot.toString1(x1,'') for x1 in _this])


class Test:
    _hx_class_name = "Test"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        _g = haxe_ds_EnumValueMap()
        _g.set(Syntax.AND,"et")
        _g.set(Syntax.OR,"ou")
        _g.set(Syntax.XOR,"xou")
        _g.set(Syntax.NOT,"non")
        _g.set(Syntax.OPEN,"[")
        _g.set(Syntax.CLOSE,"]")
        ls = LogicString(_g)
        ts = "[one=\"1 et 0\" et two] ou three et non[five]"
        ts = "[authors:\"J.\" OU sea] xou guts"
        ls.caseSensitive = False
        obj = ls.parse(ts)
        print(str(obj))
        def _hx_local_0(n):
            if (n.token.type == Syntax.XOR):
                return (((((((("((" + Std.string(n.left)) + " AND NOT ") + Std.string(n.right)) + ") OR (NOT ") + Std.string(n.left)) + " AND ") + Std.string(n.right)) + "))")
            return None
        s = ls.stringify(_hx_local_0)
        print(str(s))
        def _hx_local_2(row,value):
            value = StringTools.replace(value,"\"","")
            if (value.find(":") == -1):
                _g1 = 0
                _g2 = python_Boot.fields(row)
                while (_g1 < len(_g2)):
                    f1 = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                    _g1 = (_g1 + 1)
                    _this = Std.string(Reflect.field(row,f1)).lower()
                    _hx_str = value.lower()
                    if (_this.find(_hx_str) != -1):
                        return True
            else:
                chunks = value.split(":")
                field = (None if ((len(chunks) == 0)) else chunks.pop(0))
                val = ":".join([python_Boot.toString1(x1,'') for x1 in chunks])
                if hasattr(row,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))):
                    _this1 = Std.string(Reflect.field(row,field)).lower()
                    str1 = val.lower()
                    if (_this1.find(str1) != -1):
                        return True
            return False
        f = ls.filterFunction(_hx_local_2)
        print("Filtering sample data:")
        d = []
        _g11 = 0
        _g21 = len(SampleData.data)
        while (_g11 < _g21):
            i = _g11
            _g11 = (_g11 + 1)
            if f(python_internal_ArrayImpl._get(SampleData.data, i)):
                x = python_internal_ArrayImpl._get(SampleData.data, i)
                d.append(x)
        _g3 = 0
        while (_g3 < len(d)):
            book = (d[_g3] if _g3 >= 0 and _g3 < len(d) else None)
            _g3 = (_g3 + 1)
            print(((Std.string(Reflect.field(book,"title")) + " by ") + Std.string(Reflect.field(book,"authors"))))


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
    _hx_methods = ["toString"]


class haxe_ds_BalancedTree:
    _hx_class_name = "haxe.ds.BalancedTree"
    __slots__ = ("root",)
    _hx_fields = ["root"]
    _hx_methods = ["set", "get", "exists", "iterator", "keys", "setLoop", "iteratorLoop", "keysLoop", "balance", "compare", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.root = None

    def set(self,key,value):
        self.root = self.setLoop(key,value,self.root)

    def get(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return node.value
            if (c < 0):
                node = node.left
            else:
                node = node.right
        return None

    def exists(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return True
            elif (c < 0):
                node = node.left
            else:
                node = node.right
        return False

    def iterator(self):
        ret = []
        self.iteratorLoop(self.root,ret)
        return python_HaxeIterator(ret.__iter__())

    def keys(self):
        ret = []
        self.keysLoop(self.root,ret)
        return python_HaxeIterator(ret.__iter__())

    def setLoop(self,k,v,node):
        if (node is None):
            return haxe_ds_TreeNode(None,k,v,None)
        c = self.compare(k,node.key)
        if (c == 0):
            return haxe_ds_TreeNode(node.left,k,v,node.right,(0 if ((node is None)) else node._height))
        elif (c < 0):
            nl = self.setLoop(k,v,node.left)
            return self.balance(nl,node.key,node.value,node.right)
        else:
            nr = self.setLoop(k,v,node.right)
            return self.balance(node.left,node.key,node.value,nr)

    def iteratorLoop(self,node,acc):
        if (node is not None):
            self.iteratorLoop(node.left,acc)
            x = node.value
            acc.append(x)
            self.iteratorLoop(node.right,acc)

    def keysLoop(self,node,acc):
        if (node is not None):
            self.keysLoop(node.left,acc)
            x = node.key
            acc.append(x)
            self.keysLoop(node.right,acc)

    def balance(self,l,k,v,r):
        hl = (0 if ((l is None)) else l._height)
        hr = (0 if ((r is None)) else r._height)
        if (hl > ((hr + 2))):
            _this = l.left
            _this1 = l.right
            if (((0 if ((_this is None)) else _this._height)) >= ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(l.left,l.key,l.value,haxe_ds_TreeNode(l.right,k,v,r))
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,haxe_ds_TreeNode(l.right.right,k,v,r))
        elif (hr > ((hl + 2))):
            _this2 = r.right
            _this3 = r.left
            if (((0 if ((_this2 is None)) else _this2._height)) > ((0 if ((_this3 is None)) else _this3._height))):
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right)
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right))
        else:
            return haxe_ds_TreeNode(l,k,v,r,(((hl if ((hl > hr)) else hr)) + 1))

    def compare(self,k1,k2):
        return Reflect.compare(k1,k2)

    def toString(self):
        if (self.root is None):
            return "{}"
        else:
            return (("{" + HxOverrides.stringOrNull(self.root.toString())) + "}")



class haxe_ds_TreeNode:
    _hx_class_name = "haxe.ds.TreeNode"
    __slots__ = ("left", "right", "key", "value", "_height")
    _hx_fields = ["left", "right", "key", "value", "_height"]
    _hx_methods = ["toString"]

    def __init__(self,l,k,v,r,h = -1):
        if (h is None):
            h = -1
        self._height = None
        self.left = l
        self.key = k
        self.value = v
        self.right = r
        if (h == -1):
            tmp = None
            _this = self.left
            _this1 = self.right
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                _this2 = self.left
                tmp = (0 if ((_this2 is None)) else _this2._height)
            else:
                _this3 = self.right
                tmp = (0 if ((_this3 is None)) else _this3._height)
            self._height = (tmp + 1)
        else:
            self._height = h

    def toString(self):
        return ((HxOverrides.stringOrNull((("" if ((self.left is None)) else (HxOverrides.stringOrNull(self.left.toString()) + ", ")))) + (((("" + Std.string(self.key)) + "=") + Std.string(self.value)))) + HxOverrides.stringOrNull((("" if ((self.right is None)) else (", " + HxOverrides.stringOrNull(self.right.toString()))))))



class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):
    _hx_class_name = "haxe.ds.EnumValueMap"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["compare", "compareArgs", "compareArg"]
    _hx_statics = []
    _hx_interfaces = [haxe_IMap]
    _hx_super = haxe_ds_BalancedTree


    def __init__(self):
        super().__init__()

    def compare(self,k1,k2):
        d = (k1.index - k2.index)
        if (d != 0):
            return d
        p1 = k1.params
        p2 = k2.params
        if ((len(p1) == 0) and ((len(p2) == 0))):
            return 0
        return self.compareArgs(p1,p2)

    def compareArgs(self,a1,a2):
        ld = (len(a1) - len(a2))
        if (ld != 0):
            return ld
        _g = 0
        _g1 = len(a1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            d = self.compareArg((a1[i] if i >= 0 and i < len(a1) else None),(a2[i] if i >= 0 and i < len(a2) else None))
            if (d != 0):
                return d
        return 0

    def compareArg(self,v1,v2):
        if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)):
            return self.compare(v1,v2)
        elif (Std._hx_is(v1,list) and Std._hx_is(v2,list)):
            return self.compareArgs(v1,v2)
        else:
            return Reflect.compare(v1,v2)



class haxe_ds_GenericCell:
    _hx_class_name = "haxe.ds.GenericCell"
    __slots__ = ("elt", "next")
    _hx_fields = ["elt", "next"]

    def __init__(self,elt,next):
        self.elt = elt
        self.next = next



class haxe_ds_GenericStack:
    _hx_class_name = "haxe.ds.GenericStack"
    __slots__ = ("head",)
    _hx_fields = ["head"]

    def __init__(self):
        self.head = None



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g3 = 0
                    _g12 = l1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                return list(o._hx_fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            else:
                field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field2) if (hasattr(o,field2)) else None)
        elif isinstance(o,list):
            field3 = field
            _hx_local_1 = len(field3)
            if (_hx_local_1 == 11):
                if (field3 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 4):
                if (field3 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field3 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field3 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field3 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 5):
                if (field3 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field3 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 7):
                if (field3 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field3 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field3 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 3):
                if (field3 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field3 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 8):
                if (field3 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field3 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 6):
                if (field3 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field3 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field3 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field3 == "length"):
                    return len(o)
                elif (field3 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field3 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            else:
                field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field4) if (hasattr(o,field4)) else None)
        else:
            field5 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field5) if (hasattr(o,field5)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

SampleData.data = [_hx_AnonObject({'authors': "J.K. Rowling-Mary GrandPrÃ©", 'average_rating': "4.56", 'bookid': "1", 'isbn': "0439785960", 'isbn13': "9780439785969", 'language_code': "eng", 'num_pages': "652", 'ratings_count': "1944099", 'row': "1", 'text_reviews_count': "26249", 'title': "Harry Potter and the Half-Blood Prince (Harry Potter #6)"}), _hx_AnonObject({'authors': "J.K. Rowling-Mary GrandPrÃ©", 'average_rating': "4.49", 'bookid': "2", 'isbn': "0439358078", 'isbn13': "9780439358071", 'language_code': "eng", 'num_pages': "870", 'ratings_count': "1996446", 'row': "2", 'text_reviews_count': "27613", 'title': "Harry Potter and the Order of the Phoenix (Harry Potter #5)"}), _hx_AnonObject({'authors': "J.K. Rowling-Mary GrandPrÃ©", 'average_rating': "4.47", 'bookid': "3", 'isbn': "0439554934", 'isbn13': "9780439554930", 'language_code': "eng", 'num_pages': "320", 'ratings_count': "5629932", 'row': "3", 'text_reviews_count': "70390", 'title': "Harry Potter and the Sorcerer's Stone (Harry Potter #1)"}), _hx_AnonObject({'authors': "J.K. Rowling", 'average_rating': "4.41", 'bookid': "4", 'isbn': "0439554896", 'isbn13': "9780439554893", 'language_code': "eng", 'num_pages': "352", 'ratings_count': "6267", 'row': "4", 'text_reviews_count': "272", 'title': "Harry Potter and the Chamber of Secrets (Harry Potter #2)"}), _hx_AnonObject({'authors': "J.K. Rowling-Mary GrandPrÃ©", 'average_rating': "4.55", 'bookid': "5", 'isbn': "043965548X", 'isbn13': "9780439655484", 'language_code': "eng", 'num_pages': "435", 'ratings_count': "2149872", 'row': "5", 'text_reviews_count': "33964", 'title': "Harry Potter and the Prisoner of Azkaban (Harry Potter #3)"}), _hx_AnonObject({'authors': "J.K. Rowling-Mary GrandPrÃ©", 'average_rating': "4.78", 'bookid': "8", 'isbn': "0439682584", 'isbn13': "9780439682589", 'language_code': "eng", 'num_pages': "2690", 'ratings_count': "38872", 'row': "6", 'text_reviews_count': "154", 'title': "Harry Potter Boxed Set Books 1-5 (Harry Potter #1-5)"}), _hx_AnonObject({'authors': "W. Frederick Zimmerman", 'average_rating': "3.69", 'bookid': "9", 'isbn': "0976540606", 'isbn13': "9780976540601", 'language_code': "en-US", 'num_pages': "152", 'ratings_count': "18", 'row': "7", 'text_reviews_count': "1", 'title': "Unauthorized Harry Potter Book Seven News: \"Half-Blood Prince\" Analysis and Speculation"}), _hx_AnonObject({'authors': "J.K. Rowling", 'average_rating': "4.73", 'bookid': "10", 'isbn': "0439827604", 'isbn13': "9780439827607", 'language_code': "eng", 'num_pages': "3342", 'ratings_count': "27410", 'row': "8", 'text_reviews_count': "820", 'title': "Harry Potter Collection (Harry Potter #1-6)"}), _hx_AnonObject({'authors': "Douglas Adams", 'average_rating': "4.38", 'bookid': "12", 'isbn': "0517226952", 'isbn13': "9780517226957", 'language_code': "eng", 'num_pages': "815", 'ratings_count': "3602", 'row': "9", 'text_reviews_count': "258", 'title': "The Ultimate Hitchhiker's Guide: Five Complete Novels and One Story (Hitchhiker's Guide to the Galaxy #1-5)"}), _hx_AnonObject({'authors': "Douglas Adams", 'average_rating': "4.38", 'bookid': "13", 'isbn': "0345453743", 'isbn13': "9780345453747", 'language_code': "eng", 'num_pages': "815", 'ratings_count': "240189", 'row': "10", 'text_reviews_count': "3954", 'title': "The Ultimate Hitchhiker's Guide to the Galaxy"}), _hx_AnonObject({'authors': "Douglas Adams", 'average_rating': "4.22", 'bookid': "14", 'isbn': "1400052920", 'isbn13': "9781400052929", 'language_code': "eng", 'num_pages': "215", 'ratings_count': "4416", 'row': "11", 'text_reviews_count': "408", 'title': "The Hitchhiker's Guide to the Galaxy (Hitchhiker's Guide to the Galaxy #1)"}), _hx_AnonObject({'authors': "Douglas Adams-Stephen Fry", 'average_rating': "4.22", 'bookid': "16", 'isbn': "0739322206", 'isbn13': "9780739322208", 'language_code': "eng", 'num_pages': "6", 'ratings_count': "1222", 'row': "12", 'text_reviews_count': "253", 'title': "The Hitchhiker's Guide to the Galaxy (Hitchhiker's Guide to the Galaxy #1)"}), _hx_AnonObject({'authors': "Douglas Adams", 'average_rating': "4.38", 'bookid': "18", 'isbn': "0517149257", 'isbn13': "9780517149256", 'language_code': "en-US", 'num_pages': "815", 'ratings_count': "2801", 'row': "13", 'text_reviews_count': "192", 'title': "The Ultimate Hitchhiker's Guide (Hitchhiker's Guide to the Galaxy #1-5)"}), _hx_AnonObject({'authors': "Bill Bryson-William Roberts", 'average_rating': "4.20", 'bookid': "21", 'isbn': "076790818X", 'isbn13': "9780767908184", 'language_code': "eng", 'num_pages': "544", 'ratings_count': "228522", 'row': "14", 'text_reviews_count': "8840", 'title': "A Short History of Nearly Everything"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.43", 'bookid': "22", 'isbn': "0767915062", 'isbn13': "9780767915069", 'language_code': "eng", 'num_pages': "55", 'ratings_count': "6993", 'row': "15", 'text_reviews_count': "470", 'title': "Bill Bryson's African Diary"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.88", 'bookid': "23", 'isbn': "0767910435", 'isbn13': "9780767910439", 'language_code': "eng", 'num_pages': "256", 'ratings_count': "2020", 'row': "16", 'text_reviews_count': "124", 'title': "Bryson's Dictionary of Troublesome Words: A Writer's Guide to Getting It Right"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "4.07", 'bookid': "24", 'isbn': "0767903862", 'isbn13': "9780767903868", 'language_code': "eng", 'num_pages': "335", 'ratings_count': "68213", 'row': "17", 'text_reviews_count': "4077", 'title': "In a Sunburned Country"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.90", 'bookid': "25", 'isbn': "076790382X", 'isbn13': "9780767903820", 'language_code': "eng", 'num_pages': "304", 'ratings_count': "47490", 'row': "18", 'text_reviews_count': "2153", 'title': "I'm a Stranger Here Myself: Notes on Returning to America After Twenty Years Away"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.83", 'bookid': "26", 'isbn': "0060920084", 'isbn13': "9780060920081", 'language_code': "en-US", 'num_pages': "299", 'ratings_count': "43779", 'row': "19", 'text_reviews_count': "2146", 'title': "The Lost Continent: Travels in Small Town America"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.87", 'bookid': "27", 'isbn': "0380713802", 'isbn13': "9780380713806", 'language_code': "eng", 'num_pages': "254", 'ratings_count': "46397", 'row': "20", 'text_reviews_count': "2127", 'title': "Neither Here nor There: Travels in Europe"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.92", 'bookid': "28", 'isbn': "0380727501", 'isbn13': "9780380727506", 'language_code': "eng", 'num_pages': "324", 'ratings_count': "76476", 'row': "21", 'text_reviews_count': "3159", 'title': "Notes from a Small Island"}), _hx_AnonObject({'authors': "Bill Bryson", 'average_rating': "3.94", 'bookid': "29", 'isbn': "0380715430", 'isbn13': "9780380715435", 'language_code': "eng", 'num_pages': "270", 'ratings_count': "26672", 'row': "22", 'text_reviews_count': "1986", 'title': "The Mother Tongue: English and How It Got That Way"}), _hx_AnonObject({'authors': "J.R.R. Tolkien", 'average_rating': "4.59", 'bookid': "30", 'isbn': "0345538374", 'isbn13': "9780345538376", 'language_code': "eng", 'num_pages': "1728", 'ratings_count': "97731", 'row': "23", 'text_reviews_count': "1536", 'title': "J.R.R. Tolkien 4-Book Boxed Set: The Hobbit and The Lord of the Rings"}), _hx_AnonObject({'authors': "J.R.R. Tolkien", 'average_rating': "4.49", 'bookid': "31", 'isbn': "0618517650", 'isbn13': "9780618517657", 'language_code': "eng", 'num_pages': "1184", 'ratings_count': "1670", 'row': "24", 'text_reviews_count': "91", 'title': "The Lord of the Rings (The Lord of the Rings #1-3)"}), _hx_AnonObject({'authors': "J.R.R. Tolkien", 'average_rating': "4.49", 'bookid': "32", 'isbn': "0618346244", 'isbn13': "9780618346240", 'language_code': "eng", 'num_pages': "1137", 'ratings_count': "2819", 'row': "25", 'text_reviews_count': "139", 'title': "The Lord of the Rings (The Lord of the Rings #1-3)"}), _hx_AnonObject({'authors': "J.R.R. Tolkien", 'average_rating': "4.35", 'bookid': "34", 'isbn': "0618346252", 'isbn13': "9780618346257", 'language_code': "eng", 'num_pages': "398", 'ratings_count': "2009749", 'row': "26", 'text_reviews_count': "12784", 'title': "The Fellowship of the Ring (The Lord of the Rings #1)"}), _hx_AnonObject({'authors': "J.R.R. Tolkien-Alan Lee", 'average_rating': "4.49", 'bookid': "35", 'isbn': "0618260587", 'isbn13': "9780618260584", 'language_code': "en-US", 'num_pages': "1216", 'ratings_count': "1606", 'row': "27", 'text_reviews_count': "139", 'title': "The Lord of the Rings (The Lord of the Rings #1-3)"}), _hx_AnonObject({'authors': "Chris Smith-Christopher Lee-Richard Taylor", 'average_rating': "4.53", 'bookid': "36", 'isbn': "0618391002", 'isbn13': "9780618391004", 'language_code': "eng", 'num_pages': "218", 'ratings_count': "18934", 'row': "28", 'text_reviews_count': "43", 'title': "The Lord of the Rings: Weapons and Warfare"}), _hx_AnonObject({'authors': "Jude Fisher", 'average_rating': "4.50", 'bookid': "37", 'isbn': "0618510826", 'isbn13': "9780618510825", 'language_code': "eng", 'num_pages': "224", 'ratings_count': "343", 'row': "29", 'text_reviews_count': "6", 'title': "The Lord of the Rings: Complete Visual Companion"}), _hx_AnonObject({'authors': "J.R.R. Tolkien", 'average_rating': "4.49", 'bookid': "38", 'isbn': "0618153977", 'isbn13': "9780618153978", 'language_code': "eng", 'num_pages': "1223", 'ratings_count': "216", 'row': "30", 'text_reviews_count': "19", 'title': "The Lord of the Rings Box Set"}), _hx_AnonObject({'authors': "James Hamilton-Paterson", 'average_rating': "3.61", 'bookid': "40", 'isbn': "193337201X", 'isbn13': "9781933372013", 'language_code': "eng", 'num_pages': "288", 'ratings_count': "1214", 'row': "31", 'text_reviews_count': "202", 'title': "Cooking with Fernet Branca (Gerald Samper #1)"}), _hx_AnonObject({'authors': "Dave Thomas-David Heinemeier Hansson-Leon Breedt-Mike Clark-Thomas Fuchs-Andreas Schwarz", 'average_rating': "3.89", 'bookid': "45", 'isbn': "097669400X", 'isbn13': "9780976694007", 'language_code': "eng", 'num_pages': "558", 'ratings_count': "1269", 'row': "32", 'text_reviews_count': "59", 'title': "Agile Web Development with Rails: A Pragmatic Guide"}), _hx_AnonObject({'authors': "Gary Paulsen", 'average_rating': "3.70", 'bookid': "50", 'isbn': "0689840926", 'isbn13': "9780689840920", 'language_code': "eng", 'num_pages': "208", 'ratings_count': "254827", 'row': "33", 'text_reviews_count': "11346", 'title': "Hatchet"}), _hx_AnonObject({'authors': "Donna Ickes-Edward Sciranko-Keith Vasconcelles", 'average_rating': "3.97", 'bookid': "51", 'isbn': "1557344493", 'isbn13': "9781557344496", 'language_code': "eng", 'num_pages': "48", 'ratings_count': "35", 'row': "34", 'text_reviews_count': "2", 'title': "Hatchet: A Guide for Using \"Hatchet\" in the Classroom"}), _hx_AnonObject({'authors': "Gary Paulsen", 'average_rating': "3.87", 'bookid': "53", 'isbn': "0385326505", 'isbn13': "9780385326506", 'language_code': "eng", 'num_pages': "144", 'ratings_count': "1996", 'row': "35", 'text_reviews_count': "326", 'title': "Guts: The True Stories behind Hatchet and the Brian Books"}), _hx_AnonObject({'authors': "Molly Hatchet", 'average_rating': "4.33", 'bookid': "54", 'isbn': "1575606240", 'isbn13': "9781575606248", 'language_code': "eng", 'num_pages': "56", 'ratings_count': "6", 'row': "36", 'text_reviews_count': "0", 'title': "Molly Hatchet - 5 of the Best"}), _hx_AnonObject({'authors': "Dale Peck", 'average_rating': "3.48", 'bookid': "55", 'isbn': "1595580271", 'isbn13': "9781595580276", 'language_code': "en-US", 'num_pages': "228", 'ratings_count': "99", 'row': "37", 'text_reviews_count': "16", 'title': "Hatchet Jobs: Writings on Contemporary Fiction"}), _hx_AnonObject({'authors': "Angela Knight-Sahara Kelly-Judy Mays-Marteeka Karland-Kate Douglas-Shelby Morgen-Lacey Savage-Kate Hill-Willa Okati", 'average_rating': "3.75", 'bookid': "57", 'isbn': "1595962808", 'isbn13': "9781595962805", 'language_code': "eng", 'num_pages': "304", 'ratings_count': "167", 'row': "38", 'text_reviews_count': "4", 'title': "A Changeling for All Seasons (Changeling Seasons #1)"}), _hx_AnonObject({'authors': "Delia Sherman", 'average_rating': "3.60", 'bookid': "58", 'isbn': "0670059676", 'isbn13': "9780670059676", 'language_code': "eng", 'num_pages': "256", 'ratings_count': "957", 'row': "39", 'text_reviews_count': "112", 'title': "Changeling (Changeling #1)"}), _hx_AnonObject({'authors': "Patricia A. McKillip", 'average_rating': "4.07", 'bookid': "59", 'isbn': "0141312629", 'isbn13': "9780141312620", 'language_code': "eng", 'num_pages': "137", 'ratings_count': "4319", 'row': "40", 'text_reviews_count': "289", 'title': "The Changeling Sea"}), _hx_AnonObject({'authors': "Zilpha Keatley Snyder", 'average_rating': "4.17", 'bookid': "61", 'isbn': "0595321801", 'isbn13': "9780595321803", 'language_code': "eng", 'num_pages': "228", 'ratings_count': "1155", 'row': "41", 'text_reviews_count': "92", 'title': "The Changeling"}), _hx_AnonObject({'authors': "Kate Horsley", 'average_rating': "3.56", 'bookid': "63", 'isbn': "1590301943", 'isbn13': "9781590301944", 'language_code': "eng", 'num_pages': "339", 'ratings_count': "295", 'row': "42", 'text_reviews_count': "42", 'title': "The Changeling"}), _hx_AnonObject({'authors': "Philippa Carr", 'average_rating': "3.99", 'bookid': "66", 'isbn': "0449146979", 'isbn13': "9780449146972", 'language_code': "eng", 'num_pages': "369", 'ratings_count': "341", 'row': "43", 'text_reviews_count': "12", 'title': "The Changeling (Daughters of England #15)"}), _hx_AnonObject({'authors': "Edward P. Jones", 'average_rating': "3.83", 'bookid': "67", 'isbn': "0061159174", 'isbn13': "9780061159176", 'language_code': "eng", 'num_pages': "388", 'ratings_count': "28962", 'row': "44", 'text_reviews_count': "2576", 'title': "The Known World"}), _hx_AnonObject({'authors': "Edward P. Jones-Kevin R. Free", 'average_rating': "3.83", 'bookid': "68", 'isbn': "006076273X", 'isbn13': "9780060762735", 'language_code': "en-US", 'num_pages': "14", 'ratings_count': "50", 'row': "45", 'text_reviews_count': "12", 'title': "The Known World"}), _hx_AnonObject({'authors': "Edward P. Jones", 'average_rating': "3.83", 'bookid': "69", 'isbn': "0060749911", 'isbn13': "9780060749910", 'language_code': "eng", 'num_pages': "576", 'ratings_count': "22", 'row': "46", 'text_reviews_count': "3", 'title': "The Known World"}), _hx_AnonObject({'authors': "Satyajit Das", 'average_rating': "3.83", 'bookid': "71", 'isbn': "0273704745", 'isbn13': "9780273704744", 'language_code': "eng", 'num_pages': "334", 'ratings_count': "1398", 'row': "47", 'text_reviews_count': "78", 'title': "Traders Guns & Money: Knowns and Unknowns in the Dazzling World of Derivatives"}), _hx_AnonObject({'authors': "Mark Smylie", 'average_rating': "4.16", 'bookid': "72", 'isbn': "1932386106", 'isbn13': "9781932386103", 'language_code': "eng", 'num_pages': "352", 'ratings_count': "50", 'row': "48", 'text_reviews_count': "4", 'title': "Artesia: Adventures in the Known World"}), _hx_AnonObject({'authors': "Edward P. Jones", 'average_rating': "3.83", 'bookid': "73", 'isbn': "096513671X", 'isbn13': "9780965136716", 'language_code': "eng", 'num_pages': "388", 'ratings_count': "15", 'row': "49", 'text_reviews_count': "2", 'title': "The Known World"}), _hx_AnonObject({'authors': "John McPhee-William Howarth", 'average_rating': "4.43", 'bookid': "74", 'isbn': "0374517193", 'isbn13': "9780374517199", 'language_code': "eng", 'num_pages': "416", 'ratings_count': "550", 'row': "50", 'text_reviews_count': "36", 'title': "The John McPhee Reader (John McPhee Reader #1)"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "3.95", 'bookid': "75", 'isbn': "0374280398", 'isbn13': "9780374280390", 'language_code': "en-US", 'num_pages': "248", 'ratings_count': "1561", 'row': "51", 'text_reviews_count': "192", 'title': "Uncommon Carriers"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.15", 'bookid': "76", 'isbn': "0374519749", 'isbn13': "9780374519742", 'language_code': "eng", 'num_pages': "128", 'ratings_count': "253", 'row': "52", 'text_reviews_count': "18", 'title': "Heirs of General Practice"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.24", 'bookid': "77", 'isbn': "0374522596", 'isbn13': "9780374522599", 'language_code': "en-US", 'num_pages': "288", 'ratings_count': "3365", 'row': "53", 'text_reviews_count': "290", 'title': "The Control of Nature"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.33", 'bookid': "78", 'isbn': "0374518734", 'isbn13': "9780374518738", 'language_code': "eng", 'num_pages': "720", 'ratings_count': "2966", 'row': "54", 'text_reviews_count': "211", 'title': "Annals of the Former World"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.22", 'bookid': "79", 'isbn': "0374522871", 'isbn13': "9780374522872", 'language_code': "eng", 'num_pages': "448", 'ratings_count': "5452", 'row': "55", 'text_reviews_count': "245", 'title': "Coming Into the Country"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "3.91", 'bookid': "80", 'isbn': "0374519323", 'isbn13': "9780374519322", 'language_code': "eng", 'num_pages': "160", 'ratings_count': "671", 'row': "56", 'text_reviews_count': "52", 'title': "La Place de la Concorde Suisse"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.22", 'bookid': "81", 'isbn': "0374516006", 'isbn13': "9780374516000", 'language_code': "eng", 'num_pages': "288", 'ratings_count': "533", 'row': "57", 'text_reviews_count': "34", 'title': "Giving Good Weight"}), _hx_AnonObject({'authors': "John McPhee", 'average_rating': "4.22", 'bookid': "83", 'isbn': "0374520658", 'isbn13': "9780374520656", 'language_code': "eng", 'num_pages': "208", 'ratings_count': "1263", 'row': "58", 'text_reviews_count': "91", 'title': "Rising from the Plains"}), _hx_AnonObject({'authors': "Wendy Wasserstein", 'average_rating': "3.73", 'bookid': "85", 'isbn': "0822205106", 'isbn13': "9780822205104", 'language_code': "eng", 'num_pages': "81", 'ratings_count': "1348", 'row': "59", 'text_reviews_count': "69", 'title': "The Heidi Chronicles"}), _hx_AnonObject({'authors': "Wendy Wasserstein", 'average_rating': "3.83", 'bookid': "86", 'isbn': "0679734996", 'isbn13': "9780679734994", 'language_code': "eng", 'num_pages': "249", 'ratings_count': "2732", 'row': "60", 'text_reviews_count': "63", 'title': "The Heidi Chronicles: Uncommon Women and Others & Isn't It Romantic"}), _hx_AnonObject({'authors': "Heidi Hayes Jacobs", 'average_rating': "3.94", 'bookid': "89", 'isbn': "1596670231", 'isbn13': "9781596670235", 'language_code': "eng", 'num_pages': "138", 'ratings_count': "31", 'row': "61", 'text_reviews_count': "1", 'title': "Active Literacy Across the Curriculum: Strategies for Reading Writing Speaking and Listening"})]
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Test.main()
