<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \haxe\ds\IntMap;

class AsyncTools {
	/**
	 * @param object $iterable
	 * @param int $limit
	 * @param \Closure $cb
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	static public function aEachLimit ($iterable, $limit, $cb, $done) {
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:62: lines 62-64
		AsyncTools::aMapLimit($iterable, $limit, function ($item, $done1)  use (&$cb) {
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:63: characters 4-44
			$cb($item, function ($err = null)  use (&$done1) {
				#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:63: characters 28-43
				$done1($err, true);
			});
		}, function ($err1, $items)  use (&$done) {
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:64: characters 27-36
			$done($err1);
		});
	}

	/**
	 * @param object $iterable
	 * @param \Closure $cb
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	static public function aEachSeries ($iterable, $cb, $done) {
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:80: characters 3-36
		AsyncTools::aEachLimit($iterable, 1, $cb, $done);
	}

	/**
	 * @param object $iterable
	 * @param int $limit
	 * @param \Closure $cb
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	static public function aForEachOfMapLimit ($iterable, $limit, $cb, $done) {
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:130: characters 3-37
		$complete = new IntMap();
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:131: characters 3-32
		$it = $iterable->iterator();
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:132: characters 3-25
		$completed = false;
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:133: characters 3-19
		$running = 0;
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:134: characters 3-15
		$pos = 0;
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:139: lines 139-143
		$completedItems = function ()  use (&$pos, &$complete) {
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:140: characters 4-25
			$currentPos = $pos;
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:141: characters 17-66
			$_g = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:141: characters 18-65
			$_g1 = 0;
			$_g2 = $currentPos;
			while ($_g1 < $_g2) {
				$key = $_g1++;
				#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:141: characters 48-65
				$x = ($complete->data[$key] ?? null);
				$_g->arr[$_g->length] = $x;
				++$_g->length;

			}

			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:141: characters 4-67
			$output = $_g;
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:142: characters 4-17
			return $output;
		};
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:145: lines 145-210
		$next = null;
		$next = function ()  use (&$pos, &$completedItems, &$next, &$it, &$running, &$complete, &$done, &$cb, &$completed, &$limit) {
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:147: lines 147-209
			if (!$completed) {
				#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:151: lines 151-209
				if (!$it->hasNext()) {
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:152: lines 152-162
					if ($running <= 0) {
						#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:155: lines 155-162
						if (!$completed) {
							#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:156: characters 6-22
							$completed = true;
							#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:159: characters 17-33
							$next1 = $completedItems();
							#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:159: characters 6-34
							$done(null, $next1);
						}
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:164: characters 5-30
					$nextItem = $it->next();
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:165: characters 22-27
					$pos += 1;
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:165: characters 5-28
					$currentPos1 = $pos - 1;
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:166: characters 5-14
					$running += 1;
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:170: lines 170-194
					$cb($nextItem, $currentPos1, function ($err, $mapped)  use (&$currentPos1, &$completedItems, &$next, &$running, &$complete, &$done, &$completed) {
						#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:173: lines 173-193
						if (!$completed) {
							#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:177: lines 177-193
							if ($err !== null) {
								#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:178: lines 178-186
								if (!$completed) {
									#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:180: characters 8-24
									$completed = true;
									#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:182: characters 18-34
									$next2 = $completedItems();
									#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:182: characters 8-35
									$done($err, $next2);
								}
							} else {
								#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:189: characters 7-16
								$running -= 1;
								#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:190: characters 7-39
								$complete->data[$currentPos1] = $mapped;
								#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:192: characters 7-13
								$next();
							}
						}
					});
					#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:198: lines 198-208
					if (!$completed) {
						#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:201: lines 201-208
						if (($limit === 0) || ($running < $limit)) {
							#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:204: characters 6-12
							$next();
						}
					}
				}
			}
		};
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:211: characters 3-9
		$next();
	}

	/**
	 * @param object $iterable
	 * @param int $limit
	 * @param \Closure $cb
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	static public function aMapLimit ($iterable, $limit, $cb, $done) {
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:33: lines 33-35
		AsyncTools::aForEachOfMapLimit($iterable, $limit, function ($item, $_, $done1)  use (&$cb) {
			#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:34: characters 4-18
			$cb($item, $done1);
		}, $done);
	}

	/**
	 * @param object $iterable
	 * @param \Closure $cb
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	static public function aMapSeries ($iterable, $cb, $done) {
		#C:\HaxeToolkit\haxe\lib\asynctools/0,1,0/AsyncTools.hx:51: characters 3-35
		AsyncTools::aMapLimit($iterable, 1, $cb, $done);
	}
}

Boot::registerClass(AsyncTools::class, 'AsyncTools');
