<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * Tells if the character in the string `s` at position `pos` is a space.
	 * A character is considered to be a space character if its character code
	 * is 9,10,11,12,13 or 32.
	 * If `s` is the empty String `""`, or if pos is not a valid position within
	 * `s`, the result is false.
	 * 
	 * @param string $s
	 * @param int $pos
	 * 
	 * @return bool
	 */
	static public function isSpace ($s, $pos) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:52: characters 3-31
		$c = HxString::charCodeAt($s, $pos);
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 10-40
		if (!(($c >= 9) && ($c <= 13))) {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 33-40
			return $c === 32;
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 10-40
			return true;
		}
	}

	/**
	 * Replace all occurrences of the String `sub` in the String `s` by the
	 * String `by`.
	 * If `sub` is the empty String `""`, `by` is inserted after each character
	 * of `s` except the last one. If `by` is also the empty String `""`, `s`
	 * remains unchanged.
	 * If `sub` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:97: lines 97-99
		if ($sub === "") {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:98: characters 4-89
			return implode($by, preg_split("//u", $s, -1, PREG_SPLIT_NO_EMPTY));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:100: characters 3-40
		return str_replace($sub, $by, $s);
	}
}

Boot::registerClass(StringTools::class, 'StringTools');
