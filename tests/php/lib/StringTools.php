<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * Tells if the string `s` ends with the string `end`.
	 * If `end` is `null`, the result is unspecified.
	 * If `end` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $end
	 * 
	 * @return bool
	 */
	static public function endsWith ($s, $end) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:48: characters 10-59
		if ($end !== "") {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:48: characters 23-59
			return substr($s, -mb_strlen($end)) === $end;
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:48: characters 10-59
			return true;
		}
	}

	/**
	 * Tells if the character in the string `s` at position `pos` is a space.
	 * A character is considered to be a space character if its character code
	 * is 9,10,11,12,13 or 32.
	 * If `s` is the empty String `""`, or if pos is not a valid position within
	 * `s`, the result is false.
	 * 
	 * @param string $s
	 * @param int $pos
	 * 
	 * @return bool
	 */
	static public function isSpace ($s, $pos) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:52: characters 3-31
		$c = HxString::charCodeAt($s, $pos);
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 10-40
		if (!(($c >= 9) && ($c <= 13))) {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 33-40
			return $c === 32;
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:53: characters 10-40
			return true;
		}
	}

	/**
	 * Concatenates `c` to `s` until `s.length` is at least `l`.
	 * If `c` is the empty String `""` or if `l` does not exceed `s.length`,
	 * `s` is returned unchanged.
	 * If `c.length` is 1, the resulting String length is exactly `l`.
	 * Otherwise the length may exceed `l`.
	 * If `c` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function lpad ($s, $c, $l) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:83: characters 3-26
		$cLength = mb_strlen($c);
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:84: characters 3-26
		$sLength = mb_strlen($s);
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:85: characters 3-45
		if (($cLength === 0) || ($sLength >= $l)) {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:85: characters 37-45
			return $s;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:86: characters 3-31
		$padLength = $l - $sLength;
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:87: characters 3-50
		$padCount = (int)(($padLength / $cLength));
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:88: lines 88-93
		if ($padCount > 0) {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:89: characters 4-106
			$result = str_pad($s, strlen($s) + $padCount * strlen($c), $c, STR_PAD_LEFT);
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:90: characters 11-80
			if (($padCount * $cLength) >= $padLength) {
				#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:90: characters 47-53
				return $result;
			} else {
				#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:90: characters 56-80
				return ($c . $result);
			}
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:92: characters 4-30
			return ($c . $s);
		}
	}

	/**
	 * Tells if the string `s` starts with the string `start`.
	 * If `start` is `null`, the result is unspecified.
	 * If `start` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $start
	 * 
	 * @return bool
	 */
	static public function startsWith ($s, $start) {
		#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:44: characters 10-53
		if ($start !== "") {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:44: characters 25-53
			return Boot::equal(strpos($s, $start), 0);
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/StringTools.hx:44: characters 10-53
			return true;
		}
	}
}

Boot::registerClass(StringTools::class, 'StringTools');
