<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;

/**
 * The `Lambda` class is a collection of methods to support functional
 * programming. It is ideally used with `using Lambda` and then acts as an
 * extension to Iterable types.
 * On static platforms, working with the Iterable structure might be slower
 * than performing the operations directly on known types, such as Array and
 * List.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 * @see https://haxe.org/manual/std-Lambda.html
 */
class Lambda {
	/**
	 * Creates an Array from Iterable `it`.
	 * If `it` is an Array, this function returns a copy of it.
	 * 
	 * @param object $it
	 * 
	 * @return \Array_hx
	 */
	static public function array ($it) {
		#C:\HaxeToolkit\haxe\std/Lambda.hx:48: characters 3-26
		$a = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/Lambda.hx:49: characters 12-14
		$i = $it->iterator();
		while ($i->hasNext()) {
			#C:\HaxeToolkit\haxe\std/Lambda.hx:49: lines 49-50
			$i1 = $i->next();
			#C:\HaxeToolkit\haxe\std/Lambda.hx:50: characters 4-13
			$a->arr[$a->length] = $i1;
			++$a->length;
		}

		#C:\HaxeToolkit\haxe\std/Lambda.hx:51: characters 3-11
		return $a;
	}

	/**
	 * Tells if Iterable `it` does not contain any element.
	 * 
	 * @param object $it
	 * 
	 * @return bool
	 */
	static public function empty ($it) {
		#C:\HaxeToolkit\haxe\std/Lambda.hx:213: characters 3-34
		return !$it->iterator()->hasNext();
	}

	/**
	 * Tells if `it` contains an element for which `f` is true.
	 * This function returns true as soon as an element is found for which a
	 * call to `f` returns true.
	 * If no such element is found, the result is false.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function exists ($it, $f) {
		#C:\HaxeToolkit\haxe\std/Lambda.hx:128: characters 13-15
		$x = $it->iterator();
		while ($x->hasNext()) {
			#C:\HaxeToolkit\haxe\std/Lambda.hx:128: lines 128-130
			$x1 = $x->next();
			#C:\HaxeToolkit\haxe\std/Lambda.hx:129: lines 129-130
			if ($f($x1)) {
				#C:\HaxeToolkit\haxe\std/Lambda.hx:130: characters 5-16
				return true;
			}
		}

		#C:\HaxeToolkit\haxe\std/Lambda.hx:131: characters 3-15
		return false;
	}

	/**
	 * Returns a Array containing those elements of `it` for which `f` returned
	 * true.
	 * If `it` is empty, the result is the empty Array even if `f` is null.
	 * Otherwise if `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return \Array_hx
	 */
	static public function filter ($it, $f) {
		#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 10-37
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 21-23
		$x = $it->iterator();
		while ($x->hasNext()) {
			#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 11-36
			$x1 = $x->next();
			#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 25-36
			if ($f($x1)) {
				#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 35-36
				$_g->arr[$_g->length] = $x1;
				++$_g->length;
			}
		}

		#C:\HaxeToolkit\haxe\std/Lambda.hx:170: characters 10-37
		return $_g;
	}

	/**
	 * Calls `f` on all elements of `it`, in order.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function iter ($it, $f) {
		#C:\HaxeToolkit\haxe\std/Lambda.hx:159: characters 13-15
		$x = $it->iterator();
		while ($x->hasNext()) {
			#C:\HaxeToolkit\haxe\std/Lambda.hx:159: lines 159-160
			$x1 = $x->next();
			#C:\HaxeToolkit\haxe\std/Lambda.hx:160: characters 4-8
			$f($x1);
		}
	}
}

Boot::registerClass(Lambda::class, 'Lambda');
