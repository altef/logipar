<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace promhx\base;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxException;
use \promhx\Deferred;

class AsyncBase {
	/**
	 * @var \Array_hx
	 */
	public $_error;
	/**
	 * @var \Closure
	 */
	public $_errorMap;
	/**
	 * @var bool
	 */
	public $_errorPending;
	/**
	 * @var mixed
	 */
	public $_errorVal;
	/**
	 * @var bool
	 */
	public $_errored;
	/**
	 * @var bool
	 */
	public $_fulfilled;
	/**
	 * @var bool
	 */
	public $_pending;
	/**
	 * @var bool
	 */
	public $_resolved;
	/**
	 * @var \Array_hx
	 */
	public $_update;
	/**
	 * @var mixed
	 */
	public $_val;

	/**
	 * Utility function to determine if all Promise values are resolved and
	 * are currently fulfilled (not in the process of fulfilling).
	 * 
	 * @param object $as
	 * 
	 * @return bool
	 */
	static public function allFulfilled ($as) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:373: characters 19-21
		$a = $as->iterator();
		while ($a->hasNext()) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:373: lines 373-375
			$a1 = $a->next();
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:374: characters 13-47
			if (!$a1->_fulfilled) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:374: characters 35-47
				return false;
			}
		}

		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:376: characters 9-20
		return true;
	}

	/**
	 * @param AsyncBase $current
	 * @param AsyncBase $next
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function immediateLinkUpdate ($current, $next, $f) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:275: lines 275-278
		if ($current->_errored && !$current->_errorPending && ($current->_error->length <= 0)) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:278: characters 21-56
			$next->handleError($current->_errorVal);
		}
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:281: lines 281-289
		if ($current->_resolved && !$current->_pending) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:286: lines 286-287
			try {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:286: characters 17-52
				$next->handleResolve($f($current->_val));
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:287: characters 31-50
				$next->handleError($e);
			}
		}
	}

	/**
	 * @param Deferred $d
	 * 
	 * @return void
	 */
	public function __construct ($d = null) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:48: characters 9-28
		$this->_resolved = false;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:49: characters 9-25
		$this->_pending = false;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:50: characters 9-30
		$this->_errorPending = false;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:51: characters 9-28
		$this->_fulfilled = false;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:52: characters 9-25
		$this->_update = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:53: characters 9-25
		$this->_error = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:54: characters 9-28
		$this->_errored = false;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:56: lines 56-58
		if ($d !== null) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:57: characters 13-47
			$next = $this;
			$f = function ($x) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:57: characters 38-46
				return $x;
			};
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:57: characters 13-47
			$_this = $d->_update;
			$_this->arr[$_this->length] = new HxAnon([
				"async" => $next,
				"linkf" => function ($x1)  use (&$f, &$next) {
					$tmp = $f($x1);
					$next->handleResolve($tmp);
				},
			]);
			++$_this->length;

			AsyncBase::immediateLinkUpdate($d, $next, $f);
		}
	}

	/**
	 * @param mixed $error
	 * 
	 * @return void
	 */
	public function _handleError ($error) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:164: lines 164-217
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:165: lines 165-197
		$update_errors = function ($e)  use (&$_gthis) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:166: lines 166-195
			if ($_gthis->_error->length > 0) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:166: characters 36-60
				$_g = 0;
				$_g1 = $_gthis->_error;
				while ($_g < $_g1->length) {
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:166: characters 41-43
					$ef = ($_g1->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:166: characters 36-60
					++$_g;
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:166: characters 55-60
					$ef($e);
				}
			} else if ($_gthis->_update->length > 0) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:167: characters 42-85
				$_g2 = 0;
				$_g11 = $_gthis->_update;
				while ($_g2 < $_g11->length) {
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:167: characters 47-49
					$up = ($_g11->arr[$_g2] ?? null);
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:167: characters 42-85
					++$_g2;
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:167: characters 62-85
					$up->async->handleError($e);
				}
			} else {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:194: characters 17-22
				throw (is_object($__hx__throw = $e) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
			}
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:196: characters 13-39
			$_gthis->_errorPending = false;
		};
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:198: lines 198-216
		if (!$this->_errorPending) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:199: characters 13-33
			$this->_errorPending = true;
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:200: characters 13-28
			$this->_errored = true;
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:201: characters 13-30
			$this->_errorVal = $error;
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:203: lines 203-215
			EventLoop::$queue->add(function ()  use (&$e1, &$update_errors, &$_gthis, &$error) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:204: lines 204-214
				if ($_gthis->_errorMap !== null) {
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:209: lines 209-210
					try {
						#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:209: characters 39-55
						$tmp = ($_gthis->_errorMap)($error);
						#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:209: characters 25-56
						$_gthis->_resolve($tmp);
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e1 = $__hx__real_e;
						#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:210: characters 45-61
						$update_errors($e1);
					}
				} else {
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:213: characters 21-41
					$update_errors($error);
				}
			});
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:203: lines 203-215
			EventLoop::continueOnNextLoop();

		}
	}

	/**
	 * Resolves the given value for processing on any waiting functions.
	 * 
	 * @param mixed $val
	 * 
	 * @return void
	 */
	public function _resolve ($val) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:124: lines 124-155
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:128: lines 128-153
		if ($this->_pending) {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:129: characters 31-44
			$f = Boot::getInstanceClosure($this, '_resolve');
			$val1 = $val;
			$tmp = function ()  use (&$f, &$val1) {
				$f($val1);
			};
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:129: characters 13-50
			EventLoop::$queue->add($tmp);
			EventLoop::continueOnNextLoop();
		} else {
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:133: characters 13-29
			$this->_resolved = true;
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:137: characters 13-28
			$this->_pending = true;
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:140: lines 140-152
			EventLoop::$queue->add(function ()  use (&$e, &$_gthis, &$val) {
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:141: characters 17-27
				$_gthis->_val = $val;
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:142: lines 142-149
				$_g = 0;
				$_g1 = $_gthis->_update;
				while ($_g < $_g1->length) {
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:142: characters 22-24
					$up = ($_g1->arr[$_g] ?? null);
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:142: lines 142-149
					++$_g;
					#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:146: lines 146-147
					try {
						#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:146: characters 25-38
						$up->linkf($val);
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e = $__hx__real_e;
						#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:147: characters 35-58
						$up->async->handleError($e);
					}
				}

				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:150: characters 17-34
				$_gthis->_fulfilled = true;
				#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:151: characters 17-33
				$_gthis->_pending = false;
			});
			#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:140: lines 140-152
			EventLoop::continueOnNextLoop();

		}
	}

	/**
	 * Catch error, effectively halting the current update chain.
	 * This will prevent downstream async objects from receiving
	 * the error message.
	 * 
	 * @param \Closure $f
	 * 
	 * @return AsyncBase
	 */
	public function catchError ($f) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:68: characters 9-23
		$_this = $this->_error;
		$_this->arr[$_this->length] = $f;
		++$_this->length;

		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:69: characters 9-20
		return $this;
	}

	/**
	 * Handle errors, can be overridden
	 * 
	 * @param mixed $error
	 * 
	 * @return void
	 */
	public function handleError ($error) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:161: characters 9-28
		$this->_handleError($error);
	}

	/**
	 * @param mixed $val
	 * 
	 * @return void
	 */
	public function handleResolve ($val) {
		#C:\HaxeToolkit\haxe\lib\promhx/1,1,0/src/main/promhx/base/AsyncBase.hx:119: characters 9-22
		$this->_resolve($val);
	}
}

Boot::registerClass(AsyncBase::class, 'promhx.base.AsyncBase');
