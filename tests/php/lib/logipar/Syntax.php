<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace logipar;

use \php\Boot;
use \php\_Boot\HxEnum;

class Syntax extends HxEnum {
	/**
	 * @return Syntax
	 */
	static public function AND () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('AND', 0, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function CLOSE () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('CLOSE', 5, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function LITERAL () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('LITERAL', 6, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function NOT () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('NOT', 3, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function OPEN () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('OPEN', 4, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function OR () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('OR', 1, []);
		return $inst;
	}

	/**
	 * @return Syntax
	 */
	static public function XOR () {
		static $inst = null;
		if (!$inst) $inst = new Syntax('XOR', 2, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			0 => 'AND',
			5 => 'CLOSE',
			6 => 'LITERAL',
			3 => 'NOT',
			4 => 'OPEN',
			1 => 'OR',
			2 => 'XOR',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'AND' => 0,
			'CLOSE' => 0,
			'LITERAL' => 0,
			'NOT' => 0,
			'OPEN' => 0,
			'OR' => 0,
			'XOR' => 0,
		];
	}
}

Boot::registerClass(Syntax::class, 'logipar.Syntax');
