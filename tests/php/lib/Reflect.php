<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;
use \php\_Boot\HxClass;
use \php\_Boot\HxClosure;

/**
 * The Reflect API is a way to manipulate values dynamically through an
 * abstract interface in an untyped manner. Use with care.
 * @see https://haxe.org/manual/std-reflection.html
 */
class Reflect {
	/**
	 * Compares the functions `f1` and `f2`.
	 * If `f1` or `f2` are null, the result is false.
	 * If `f1` or `f2` are not functions, the result is unspecified.
	 * Otherwise the result is true if `f1` and the `f2` are physically equal,
	 * false otherwise.
	 * If `f1` or `f2` are member method closures, the result is true if they
	 * are closures of the same method on the same object value, false otherwise.
	 * 
	 * @param mixed $f1
	 * @param mixed $f2
	 * 
	 * @return bool
	 */
	static public function compareMethods ($f1, $f2) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:127: lines 127-131
		if (($f1 instanceof HxClosure) && ($f2 instanceof HxClosure)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:128: characters 4-24
			return $f1->equals($f2);
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:130: characters 4-19
			return Boot::equal($f1, $f2);
		}
	}

	/**
	 * Tells if structure `o` has a field named `field`.
	 * This is only guaranteed to work for anonymous structures. Refer to
	 * `Type.getInstanceFields` for a function supporting class instances.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function hasField ($o, $field) {
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:33: characters 3-35
		if (!is_object($o)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:33: characters 23-35
			return false;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:34: characters 3-44
		if (property_exists($o, $field)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:34: characters 33-44
			return true;
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:36: lines 36-39
		if (($o instanceof HxClass)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:37: characters 4-54
			$phpClassName = $o->phpClassName;
			#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 11-142
			if (!(property_exists($phpClassName, $field) || method_exists($phpClassName, $field))) {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 103-142
				return defined("" . ($phpClassName??'null') . "::" . ($field??'null'));
			} else {
				#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:38: characters 11-142
				return true;
			}
		}
		#C:\HaxeToolkit\haxe\std/php/_std/Reflect.hx:41: characters 3-15
		return false;
	}
}

Boot::registerClass(Reflect::class, 'Reflect');
