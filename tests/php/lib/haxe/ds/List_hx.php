<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\ds\_List\ListIterator;
use \haxe\ds\_List\ListNode;

/**
 * A linked-list of elements. The list is composed of element container objects
 * that are chained together. It is optimized so that adding or removing an
 * element does not imply copying the whole list content every time.
 * @see https://haxe.org/manual/std-List.html
 */
class List_hx {
	/**
	 * @var ListNode
	 */
	public $h;
	/**
	 * @var int
	 * The length of `this` List.
	 */
	public $length;
	/**
	 * @var ListNode
	 */
	public $q;

	/**
	 * Creates a new empty list.
	 * 
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:45: characters 3-13
		$this->length = 0;
	}

	/**
	 * Adds element `item` at the end of `this` List.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function add ($item) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:54: characters 3-39
		$x = new ListNode($item, null);
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:55: lines 55-58
		if ($this->h === null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:56: characters 4-9
			$this->h = $x;
		} else {
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:58: characters 4-14
			$this->q->next = $x;
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:59: characters 3-8
		$this->q = $x;
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:60: characters 3-11
		$this->length++;
	}

	/**
	 * Returns a list filtered with `f`. The returned list will contain all
	 * elements for which `f(x) == true`.
	 * 
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	public function filter ($f) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:219: characters 3-23
		$l2 = new List_hx();
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:220: characters 3-13
		$l = $this->h;
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:221: lines 221-226
		while ($l !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:222: characters 4-19
			$v = $l->item;
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:223: characters 4-14
			$l = $l->next;
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:224: lines 224-225
			if ($f($v)) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:225: characters 5-14
				$l2->add($v);
			}
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:227: characters 3-12
		return $l2;
	}

	/**
	 * Tells if `this` List is empty.
	 * 
	 * @return bool
	 */
	public function isEmpty () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:115: characters 3-21
		return $this->h === null;
	}

	/**
	 * Returns an iterator on the elements of the list.
	 * 
	 * @return ListIterator
	 */
	public function iterator () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:162: characters 3-32
		return new ListIterator($this->h);
	}

	/**
	 * Returns the first element of `this` List, or null if no elements exist.
	 * The element is removed from `this` List.
	 * 
	 * @return mixed
	 */
	public function pop () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:101: lines 101-102
		if ($this->h === null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:102: characters 4-15
			return null;
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:103: characters 3-18
		$x = $this->h->item;
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:104: characters 3-13
		$this->h = $this->h->next;
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:105: lines 105-106
		if ($this->h === null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:106: characters 4-12
			$this->q = null;
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:107: characters 3-11
		$this->length--;
		#C:\HaxeToolkit\haxe\std/haxe/ds/List.hx:108: characters 3-11
		return $x;
	}
}

Boot::registerClass(List_hx::class, 'haxe.ds.List');
