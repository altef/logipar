<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe;

use \php\Boot;

class MainLoop {
	/**
	 * @var MainEvent
	 */
	static public $pending;

	/**
	 * @return bool
	 */
	static public function hasEvents () {
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:64: characters 3-19
		$p = MainLoop::$pending;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:65: lines 65-69
		while ($p !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:66: lines 66-67
			if ($p->isBlocking) {
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:67: characters 5-16
				return true;
			}
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:68: characters 4-14
			$p = $p->next;
		}
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:70: characters 3-15
		return false;
	}

	/**
	 * @return void
	 */
	static public function sortEvents () {
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:99: characters 3-22
		$list = MainLoop::$pending;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:101: characters 3-28
		if ($list === null) {
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:101: characters 22-28
			return;
		}
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:103: characters 3-49
		$insize = 1;
		$nmerges = null;
		$psize = 0;
		$qsize = 0;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:104: characters 3-33
		$p = null;
		$q = null;
		$e = null;
		$tail = null;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:106: lines 106-148
		while (true) {
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:107: characters 4-12
			$p = $list;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:108: characters 4-15
			$list = null;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:109: characters 4-15
			$tail = null;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:110: characters 4-15
			$nmerges = 0;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:111: lines 111-143
			while ($p !== null) {
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:112: characters 5-14
				++$nmerges;
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:113: characters 5-10
				$q = $p;
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:114: characters 5-14
				$psize = 0;
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:115: lines 115-119
				$_g = 0;
				$_g1 = $insize;
				while ($_g < $_g1) {
					$i = $_g++;
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:116: characters 6-13
					++$psize;
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:117: characters 6-16
					$q = $q->next;
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:118: characters 6-27
					if ($q === null) {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:118: characters 22-27
						break;
					}
				}

				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:120: characters 5-19
				$qsize = $insize;
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:121: lines 121-141
				while (($psize > 0) || (($qsize > 0) && ($q !== null))) {
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:122: lines 122-134
					if ($psize === 0) {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:123: characters 7-12
						$e = $q;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:124: characters 7-17
						$q = $q->next;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:125: characters 7-14
						--$qsize;
					} else if (($qsize === 0) || ($q === null) || (($p->priority > $q->priority) || (($p->priority === $q->priority) && ($p->nextRun <= $q->nextRun)))) {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:127: characters 7-12
						$e = $p;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:128: characters 7-17
						$p = $p->next;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:129: characters 7-14
						--$psize;
					} else {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:131: characters 7-12
						$e = $q;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:132: characters 7-17
						$q = $q->next;
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:133: characters 7-14
						--$qsize;
					}
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:135: lines 135-138
					if ($tail !== null) {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:136: characters 7-20
						$tail->next = $e;
					} else {
						#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:138: characters 7-15
						$list = $e;
					}
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:139: characters 6-19
					$e->prev = $tail;
					#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:140: characters 6-14
					$tail = $e;
				}
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:142: characters 5-10
				$p = $q;
			}
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:144: characters 4-20
			$tail->next = null;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:145: lines 145-146
			if ($nmerges <= 1) {
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:146: characters 5-10
				break;
			}
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:147: characters 4-15
			$insize *= 2;
		}
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:149: characters 3-19
		$list->prev = null;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:150: characters 3-17
		MainLoop::$pending = $list;
	}

	/**
	 * Run the pending events. Return the time for next event.
	 * 
	 * @return float
	 */
	static public function tick () {
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:157: characters 3-15
		MainLoop::sortEvents();
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:158: characters 3-19
		$e = MainLoop::$pending;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:159: characters 3-32
		$now = microtime(true);
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:160: characters 3-18
		$wait = 1e9;
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:161: lines 161-170
		while ($e !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:162: characters 4-22
			$next = $e->next;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:163: characters 4-29
			$wt = $e->nextRun - $now;
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:164: lines 164-168
			if (($e->nextRun < 0) || ($wt <= 0)) {
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:165: characters 5-13
				$wait = 0;
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:166: characters 5-13
				if ($e->f !== null) {
					($e->f)();
				}
			} else if ($wait > $wt) {
				#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:168: characters 5-14
				$wait = $wt;
			}
			#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:169: characters 4-12
			$e = $next;
		}
		#C:\HaxeToolkit\haxe\std/haxe/MainLoop.hx:171: characters 3-14
		return $wait;
	}
}

Boot::registerClass(MainLoop::class, 'haxe.MainLoop');
