<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \buddy\TestFunc;
use \php\_Boot\HxAnon;
use \buddy\SuitesRunner;
use \php\Boot;
use \haxe\Log;
use \buddy\ShouldString;
use \buddy\reporting\ConsoleReporter;
use \buddy\SingleSuite;
use \logipar\Logipar;

class Test extends SingleSuite {
	/**
	 * @return void
	 */
	static public function main () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:196: characters 4-33
		$testsDone = false;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:197: characters 4-43
		$runner = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:198: characters 4-34
		$oldTrace = Log::$trace;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:200: lines 200-220
		$outputError = function ()  use (&$oldTrace, &$runner) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:201: characters 5-30
			Log::$trace = $oldTrace;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:203: lines 203-208
			$pos = new HxAnon([
				"fileName" => "Buddy",
				"lineNumber" => 0,
				"className" => "",
				"methodName" => "",
			]);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:210: characters 5-51
			(Log::$trace)($runner->unrecoverableError, $pos);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:212: characters 5-48
			$stack = $runner->unrecoverableErrorStack;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:213: characters 5-51
			if (($stack === null) || ($stack->length === 0)) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:213: characters 45-51
				return;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:215: lines 215-219
			$_g = 0;
			while ($_g < $stack->length) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:215: characters 10-11
				$s = ($stack->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:215: lines 215-219
				++$_g;
				if ($s->index === 2) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:216: characters 28-32
					$line = $s->params[2];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:216: characters 22-26
					$file = $s->params[1];
					#(unknown)
					if ($line > 0) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:217: characters 7-45
						(Log::$trace)(($file??'null') . ":" . ($line??'null'), $pos);
					}
				}
			}

		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:222: lines 222-230
		$startRun = function ($done)  use (&$outputError, &$runner) {
			#src/Test.hx:6: lines 6-124
			$runner1 = \Array_hx::wrap([new Test()]);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:223: characters 5-60
			$runner = new SuitesRunner($runner1, new ConsoleReporter());
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:225: characters 5-26
			$r = $runner->run();
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:226: lines 226-229
			$r->then(function ($_)  use (&$outputError, &$done, &$runner) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:227: characters 6-58
				if ($runner->unrecoverableError !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:227: characters 45-58
					$outputError();
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:228: characters 6-12
				$done();
			});
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:277: characters 5-55
		$startRun(function ()  use (&$runner) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/GenerateMain.hx:277: characters 25-54
			exit($runner->statusCode());
		});
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#src/Test.hx:8: lines 8-122
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:343: characters 40-47
		parent::__construct();
		#src/Test.hx:10: lines 10-31
		$this->describe("Overwriting syntax", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:13: characters 4-34
			$l = new Logipar();
			#src/Test.hx:14: characters 4-40
			$l->overwrite("AND", "et");
			#src/Test.hx:15: characters 4-39
			$l->overwrite("OR", "ou");
			#src/Test.hx:16: characters 4-41
			$l->overwrite("XOR", "xou");
			#src/Test.hx:17: characters 4-41
			$l->overwrite("NOT", "non");
			#src/Test.hx:18: characters 4-40
			$l->overwrite("OPEN", "[");
			#src/Test.hx:19: characters 4-41
			$l->overwrite("CLOSE", "]");
			#src/Test.hx:21: lines 21-23
			$tests = \Array_hx::wrap([\Array_hx::wrap([
				"[one ou two] et three ou non four",
				"((({one} OR {two}) AND {three}) OR NOT({four}))",
			])]);
			#src/Test.hx:25: lines 25-30
			$_g = 0;
			while ($_g < $tests->length) {
				unset($t);
				#src/Test.hx:25: characters 8-9
				$t = ($tests->arr[$_g] ?? null);
				#src/Test.hx:25: lines 25-30
				++$_g;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp = TestFunc::Sync(function ()  use (&$l, &$t) {
					#src/Test.hx:27: characters 6-19
					$l->parse(($t->arr[0] ?? null));
					#src/Test.hx:28: characters 6-35
					ShouldString::should($l->stringify())->be(($t->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 28,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:26: lines 26-29
				$_gthis->it("Testing: " . (($t->arr[0] ?? null)??'null'), $tmp, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 26,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
		#src/Test.hx:33: lines 33-46
		$this->describe("Testing quotation marks", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:34: characters 4-34
			$l1 = new Logipar();
			#src/Test.hx:35: characters 4-26
			$_this = $l1->quotations;
			$_this->arr[$_this->length] = "`";
			++$_this->length;

			#src/Test.hx:36: lines 36-39
			$tests1 = \Array_hx::wrap([
				\Array_hx::wrap([
					"one=`hello there`",
					"{one=`hello there`}",
				]),
				\Array_hx::wrap([
					"\"one and two\" OR 'three'",
					"({\"one and two\"} OR {'three'})",
				]),
			]);
			#src/Test.hx:40: lines 40-45
			$_g1 = 0;
			while ($_g1 < $tests1->length) {
				unset($t1);
				#src/Test.hx:40: characters 8-9
				$t1 = ($tests1->arr[$_g1] ?? null);
				#src/Test.hx:40: lines 40-45
				++$_g1;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp1 = TestFunc::Sync(function ()  use (&$l1, &$t1) {
					#src/Test.hx:42: characters 6-19
					$l1->parse(($t1->arr[0] ?? null));
					#src/Test.hx:43: characters 6-35
					ShouldString::should($l1->stringify())->be(($t1->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 43,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:41: lines 41-44
				$_gthis->it("Testing: " . (($t1->arr[0] ?? null)??'null'), $tmp1, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 41,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
		#src/Test.hx:49: lines 49-61
		$this->describe("Testing case-insensitivity", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:50: characters 4-34
			$l2 = new Logipar();
			#src/Test.hx:51: characters 4-27
			$l2->caseSensitive = false;
			#src/Test.hx:52: lines 52-54
			$tests2 = \Array_hx::wrap([\Array_hx::wrap([
				"a and b or c",
				"(({a} AND {b}) OR {c})",
			])]);
			#src/Test.hx:55: lines 55-60
			$_g2 = 0;
			while ($_g2 < $tests2->length) {
				unset($t2);
				#src/Test.hx:55: characters 8-9
				$t2 = ($tests2->arr[$_g2] ?? null);
				#src/Test.hx:55: lines 55-60
				++$_g2;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp2 = TestFunc::Sync(function ()  use (&$t2, &$l2) {
					#src/Test.hx:57: characters 6-19
					$l2->parse(($t2->arr[0] ?? null));
					#src/Test.hx:58: characters 6-35
					ShouldString::should($l2->stringify())->be(($t2->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 58,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:56: lines 56-59
				$_gthis->it("Testing: " . (($t2->arr[0] ?? null)??'null'), $tmp2, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 56,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
		#src/Test.hx:65: lines 65-78
		$this->describe("Other random logic tests", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:66: characters 4-34
			$l3 = new Logipar();
			#src/Test.hx:67: lines 67-71
			$tests3 = \Array_hx::wrap([
				\Array_hx::wrap([
					"NOT a OR b",
					"(NOT({a}) OR {b})",
				]),
				\Array_hx::wrap([
					"NOT a AND b",
					"NOT(({a} AND {b}))",
				]),
				\Array_hx::wrap([
					"a AND b XOR c AND d",
					"(({a} AND {b}) XOR ({c} AND {d}))",
				]),
			]);
			#src/Test.hx:72: lines 72-77
			$_g3 = 0;
			while ($_g3 < $tests3->length) {
				unset($t3);
				#src/Test.hx:72: characters 8-9
				$t3 = ($tests3->arr[$_g3] ?? null);
				#src/Test.hx:72: lines 72-77
				++$_g3;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp3 = TestFunc::Sync(function ()  use (&$l3, &$t3) {
					#src/Test.hx:74: characters 6-19
					$l3->parse(($t3->arr[0] ?? null));
					#src/Test.hx:75: characters 6-35
					ShouldString::should($l3->stringify())->be(($t3->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 75,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:73: lines 73-76
				$_gthis->it("Testing: " . (($t3->arr[0] ?? null)??'null'), $tmp3, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 73,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
		#src/Test.hx:81: lines 81-103
		$this->describe("Testing a custom string", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:82: characters 4-34
			$l4 = new Logipar();
			#src/Test.hx:83: lines 83-87
			$tests4 = \Array_hx::wrap([
				\Array_hx::wrap([
					"NOT a OR b",
					"(NOT(a) OR b)",
				]),
				\Array_hx::wrap([
					"NOT a AND b",
					"NOT((a AND b))",
				]),
				\Array_hx::wrap([
					"a XOR b",
					"((a AND NOT b) OR (NOT a AND b))",
				]),
			]);
			#src/Test.hx:88: lines 88-101
			$_g4 = 0;
			while ($_g4 < $tests4->length) {
				unset($t4);
				#src/Test.hx:88: characters 8-9
				$t4 = ($tests4->arr[$_g4] ?? null);
				#src/Test.hx:88: lines 88-101
				++$_g4;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp4 = TestFunc::Sync(function ()  use (&$l4, &$t4) {
					#src/Test.hx:90: characters 6-19
					$l4->parse(($t4->arr[0] ?? null));
					#src/Test.hx:91: lines 91-99
					ShouldString::should($l4->stringify(function ($n) {
						#src/Test.hx:92: lines 92-94
						if ($n->token->type === "XOR") {
							#src/Test.hx:93: characters 8-123
							return "((" . (($n->f)($n->left)??'null') . " AND NOT " . (($n->f)($n->right)??'null') . ") OR (NOT " . (($n->f)($n->left)??'null') . " AND " . (($n->f)($n->right)??'null') . "))";
						}
						#src/Test.hx:95: lines 95-97
						if ($n->token->type === "LITERAL") {
							#src/Test.hx:96: characters 8-42
							return \Std::string($n->token->literal);
						}
						#src/Test.hx:98: characters 7-18
						return null;
					}))->be(($t4->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 91,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:89: lines 89-100
				$_gthis->it("Testing: " . (($t4->arr[0] ?? null)??'null'), $tmp4, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 89,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
		#src/Test.hx:105: lines 105-118
		$this->describe("Does quoting still work?", TestFunc::Sync(function ()  use (&$_gthis) {
			#src/Test.hx:106: characters 4-34
			$l5 = new Logipar();
			#src/Test.hx:107: characters 4-27
			$l5->caseSensitive = false;
			#src/Test.hx:108: lines 108-111
			$tests5 = \Array_hx::wrap([
				\Array_hx::wrap([
					"\"a and b\" or c",
					"({\"a and b\"} OR {c})",
				]),
				\Array_hx::wrap([
					"\"a and (b)\" or c",
					"({\"a and (b)\"} OR {c})",
				]),
			]);
			#src/Test.hx:112: lines 112-117
			$_g5 = 0;
			while ($_g5 < $tests5->length) {
				unset($t5);
				#src/Test.hx:112: characters 8-9
				$t5 = ($tests5->arr[$_g5] ?? null);
				#src/Test.hx:112: lines 112-117
				++$_g5;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/internal/SuiteBuilder.hx:243: characters 34-43
				$tmp5 = TestFunc::Sync(function ()  use (&$l5, &$t5) {
					#src/Test.hx:114: characters 6-19
					$l5->parse(($t5->arr[0] ?? null));
					#src/Test.hx:115: characters 6-35
					ShouldString::should($l5->stringify())->be(($t5->arr[1] ?? null), new HxAnon([
						"fileName" => "src/Test.hx",
						"lineNumber" => 115,
						"className" => "Test",
						"methodName" => "new",
					]));
				});
				#src/Test.hx:113: lines 113-116
				$_gthis->it("Testing: " . (($t5->arr[0] ?? null)??'null'), $tmp5, null, new HxAnon([
					"fileName" => "src/Test.hx",
					"lineNumber" => 113,
					"className" => "Test",
					"methodName" => "new",
				]));
			}

		}));
	}
}

Boot::registerClass(Test::class, 'Test');
