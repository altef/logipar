<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy\reporting;

use \buddy\Spec;
use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \promhx\Promise;
use \buddy\SpecStatus;
use \php\_Boot\HxString;
use \promhx\Deferred;
use \buddy\reporting\_TraceReporter\Color_Impl_;

class TraceReporter implements Reporter {
	/**
	 * @var bool
	 */
	public $colors;

	/**
	 * @param bool $colors
	 * 
	 * @return void
	 */
	public function __construct ($colors = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:29: characters 3-23
		if ($colors === null) {
			$colors = false;
		}
		$this->colors = $colors;
	}

	/**
	 * @param object $suites
	 * @param bool $status
	 * 
	 * @return Promise
	 */
	public function done ($suites, $status) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:41: lines 41-146
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:45: characters 3-14
		$this->println("");
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:48: characters 3-17
		$total = 0;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:49: characters 3-20
		$failures = 0;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:50: characters 3-19
		$pending = 0;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:52: characters 3-41
		$countTests = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:53: characters 3-85
		$printTests = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:55: lines 55-66
		$countTests = function ($s)  use (&$total, &$pending, &$countTests, &$failures) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:56: characters 4-35
			if ($s->error !== null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:56: characters 25-35
				$failures += 1;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:58: lines 58-65
			$_g = 0;
			$_g1 = $s->steps;
			while ($_g < $_g1->length) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:58: characters 9-11
				$sp = ($_g1->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:58: lines 58-65
				++$_g;
				$__hx__switch = ($sp->index);
				if ($__hx__switch === 0) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:63: characters 17-18
					$s1 = $sp->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:64: characters 6-19
					$countTests($s1);
				} else if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:59: characters 16-18
					$sp1 = $sp->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:60: characters 6-13
					$total += 1;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:61: lines 61-62
					if ($sp1->status === SpecStatus::Failed()) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:61: characters 31-41
						$failures += 1;
					} else if ($sp1->status === SpecStatus::Pending()) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:62: characters 37-46
						$pending += 1;
					}

				}
			}

		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:68: characters 3-26
		\Lambda::iter($suites, $countTests);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:70: lines 70-129
		$printTests = function ($s2, $indentLevel)  use (&$_gthis, &$printTests) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:71: characters 4-23
			$success = true;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:72: characters 4-19
			$lines = new \Array_hx();
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:74: lines 74-77
			$print = function ($str, $color = 39)  use (&$lines, &$_gthis, &$indentLevel) {
				if ($color === null) {
					$color = 39;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:75: characters 5-54
				$start = $_gthis->strCol($color);
				$end = $_gthis->strCol(39);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:76: characters 59-87
				$b = $indentLevel * 2;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:76: characters 5-96
				$x = ($start??'null') . (\StringTools::lpad($str, " ", mb_strlen($str) + (int)((is_nan(0) || is_nan($b) ? \Math::$NaN : max(0, $b))))??'null') . ($end??'null');
				$lines->arr[$lines->length] = $x;
				++$lines->length;

			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:79: lines 79-86
			$printStack = function ($indent, $stack)  use (&$print) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:80: characters 5-51
				if (($stack === null) || ($stack->length === 0)) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:80: characters 45-51
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:81: lines 81-85
				$_g2 = 0;
				while ($_g2 < $stack->length) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:81: characters 10-11
					$s3 = ($stack->arr[$_g2] ?? null);
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:81: lines 81-85
					++$_g2;
					if ($s3->index === 2) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:82: characters 28-32
						$line = $s3->params[2];
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:82: characters 22-26
						$file = $s3->params[1];
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:82: lines 82-84
						if (($line > 0) && (HxString::indexOf($file, "buddy/internal/") !== 0) && (HxString::indexOf($file, "buddy.SuitesRunner") !== 0)) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:83: characters 7-46
							$print(($indent??'null') . (("@ " . ($file??'null') . ":" . ($line??'null'))??'null'), 33);
						}
					}
				}

			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:88: lines 88-90
			$printTraces = function ($spec)  use (&$print) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:89: characters 5-53
				$_g3 = 0;
				$_g11 = $spec->traces;
				while ($_g3 < $_g11->length) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:89: characters 10-11
					$t = ($_g11->arr[$_g3] ?? null);
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:89: characters 5-53
					++$_g3;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:89: characters 28-53
					$print("    " . ($t??'null'), 33);
				}
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:92: characters 4-54
			if (mb_strlen($s2->description) > 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:92: characters 34-54
				$print($s2->description);
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:94: lines 94-99
			if ($s2->error !== null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:96: characters 11-30
				$printTests1 = "ERROR: " . (\Std::string($s2->error)??'null');
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:96: characters 5-36
				$print($printTests1, 31);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:97: characters 5-30
				$printStack("  ", $s2->stack);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:98: characters 5-44
				return new HxAnon([
					"success" => false,
					"lines" => $lines,
				]);
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:101: lines 101-123
			$_g4 = 0;
			$_g12 = $s2->steps;
			while ($_g4 < $_g12->length) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:101: characters 9-13
				$step = ($_g12->arr[$_g4] ?? null);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:101: lines 101-123
				++$_g4;
				$__hx__switch = ($step->index);
				if ($__hx__switch === 0) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:119: characters 17-18
					$s4 = $step->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:120: characters 6-47
					$ret = $printTests($s4, $indentLevel + 1);
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:121: characters 27-38
					$success = $success && $ret->success;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:122: characters 6-37
					$lines = $lines->concat($ret->lines);

				} else if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:102: characters 16-18
					$sp2 = $step->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:103: characters 27-46
					$success = $success && ($sp2->status === SpecStatus::Passed());
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:105: lines 105-117
					if ($sp2->status === SpecStatus::Failed()) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:106: characters 7-54
						$print("  " . ($sp2->description??'null') . " (FAILED)", 31);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:107: characters 7-22
						$printTraces($sp2);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:109: lines 109-112
						$_g5 = 0;
						$_g13 = $sp2->failures;
						while ($_g5 < $_g13->length) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:109: characters 11-18
							$failure = ($_g13->arr[$_g5] ?? null);
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:109: lines 109-112
							++$_g5;
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:110: characters 14-36
							$printTests2 = "    " . (\Std::string($failure->error)??'null');
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:110: characters 8-45
							$print($printTests2, 33);
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:111: characters 8-43
							$printStack("      ", $failure->stack);
						}

					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:115: characters 13-59
						$printTests3 = "  " . ($sp2->description??'null') . " (" . (\Std::string($sp2->status)??'null') . ")";
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:115: characters 7-98
						$print($printTests3, ($sp2->status === SpecStatus::Passed() ? 32 : 33));
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:116: characters 7-22
						$printTraces($sp2);
					}

				}
			}

			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:125: lines 125-128
			return new HxAnon([
				"success" => $success,
				"lines" => $lines,
			]);
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:131: lines 131-134
		\Lambda::iter($suites, function ($s5)  use (&$_gthis, &$printTests) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:132: characters 4-32
			$ret1 = $printTests($s5, -1);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:133: characters 4-27
			\Lambda::iter($ret1->lines, Boot::getInstanceClosure($_gthis, 'println'));
		});
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:136: characters 3-53
		$totalColor = ($failures > 0 ? 31 : 32);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:137: characters 3-62
		$pendingColor = ($pending > 0 ? 33 : $totalColor);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:139: lines 139-143
		$this->println(($this->strCol($totalColor)??'null') . (("" . ($total??'null') . " specs, " . ($failures??'null') . " failures, ")??'null') . ($this->strCol($pendingColor)??'null') . (("" . ($pending??'null') . " pending")??'null') . ($this->strCol(39)??'null'));
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:145: characters 3-36
		return $this->resolveImmediately($suites);
	}

	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function println ($s) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:159: characters 3-8
		(Log::$trace)($s, new HxAnon([
			"fileName" => "buddy/reporting/TraceReporter.hx",
			"lineNumber" => 159,
			"className" => "buddy.reporting.TraceReporter",
			"methodName" => "println",
		]));
	}

	/**
	 * @param Spec $spec
	 * 
	 * @return Promise
	 */
	public function progress ($spec) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:38: characters 3-34
		return $this->resolveImmediately($spec);
	}

	/**
	 * Convenience method.
	 * 
	 * @param mixed $o
	 * 
	 * @return Promise
	 */
	public function resolveImmediately ($o) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:169: characters 3-31
		$def = new Deferred();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:170: characters 3-26
		$pr = $def->promise();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:171: characters 3-17
		$def->resolve($o);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:172: characters 3-12
		return $pr;
	}

	/**
	 * @return Promise
	 */
	public function start () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:33: characters 3-34
		return $this->resolveImmediately(true);
	}

	/**
	 * @param int $color
	 * 
	 * @return string
	 */
	public function strCol ($color) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:163: characters 48-83
		if ($this->colors) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:163: characters 62-78
			return Color_Impl_::ansiCode($color);
		} else {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/reporting/TraceReporter.hx:163: characters 81-83
			return "";
		}
	}
}

Boot::registerClass(TraceReporter::class, 'buddy.reporting.TraceReporter');
