<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;

class ShouldDate extends Should {

	/**
	 * @param \Date $i
	 * 
	 * @return ShouldDate
	 */
	static public function should ($i) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:193: characters 3-27
		return new ShouldDate($i);
	}

	/**
	 * @param \Date $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:198: characters 3-24
		if ($inverse === null) {
			$inverse = false;
		}
		parent::__construct($value, $inverse);
	}

	/**
	 * @param \Date $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beAfter ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:224: lines 224-227
		$this->test($this->value->getTime() > $expected->getTime(), $p, "Expected date after " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected date not after " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @param string $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beAfterStr ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:237: characters 10-47
		$this->beAfter(\Date::fromString($expected), $p);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:237: characters 3-47
		return;
	}

	/**
	 * @param \Date $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beBefore ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:216: lines 216-219
		$this->test($this->value->getTime() < $expected->getTime(), $p, "Expected date before " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected date not before " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @param string $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beBeforeStr ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:234: characters 10-48
		$this->beBefore(\Date::fromString($expected), $p);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:234: characters 3-48
		return;
	}

	/**
	 * @param \Date $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beOn ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:208: lines 208-211
		$this->test(Boot::equal($this->value->getTime(), $expected->getTime()), $p, "Expected date equal to " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected date not equal to " . ($this->quote($expected)??'null'));
	}

	/**
	 * @param string $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beOnStr ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:231: characters 10-44
		$this->beOn(\Date::fromString($expected), $p);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:231: characters 3-44
		return;
	}

	/**
	 * @return ShouldDate
	 */
	public function get_not () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:202: characters 31-69
		return new ShouldDate($this->value, !$this->inverse);
	}
}

Boot::registerClass(ShouldDate::class, 'buddy.ShouldDate');
Boot::registerGetters('buddy\\ShouldDate', [
	'not' => true
]);
