<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\StackItem;
use \haxe\CallStack;
use \haxe\Log;
use \buddy\tests\SelfTest;
use \promhx\Promise;
use \buddy\reporting\Reporter;
use \buddy\reporting\ConsoleReporter;
use \haxe\rtti\Meta;
use \php\_Boot\HxException;
use \promhx\Deferred;

class SuitesRunner {
	/**
	 * @var \Closure
	 */
	static public $currentTest;

	/**
	 * @var bool
	 */
	public $allTestsPassed;
	/**
	 * @var object
	 */
	public $buddySuites;
	/**
	 * @var bool
	 */
	public $includeMode;
	/**
	 * @var \Closure
	 */
	public $oldLog;
	/**
	 * @var Reporter
	 */
	public $reporter;
	/**
	 * @var Deferred
	 */
	public $runCompleted;
	/**
	 * @var mixed
	 */
	public $unrecoverableError;
	/**
	 * @var \Array_hx
	 */
	public $unrecoverableErrorStack;

	/**
	 * @param object $p
	 * 
	 * @return \Array_hx
	 */
	static public function posInfosToStack ($p) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:66: lines 66-68
		if ($p === null) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:67: characters 6-38
			return \Array_hx::wrap([StackItem::FilePos(null, "", 0)]);
		} else {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:68: characters 6-57
			return \Array_hx::wrap([StackItem::FilePos(null, $p->fileName, $p->lineNumber)]);
		}
	}

	/**
	 * @param object $buddySuites
	 * @param Reporter $reporter
	 * 
	 * @return void
	 */
	public function __construct ($buddySuites, $reporter = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:55: characters 38-43
		$this->allTestsPassed = false;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:53: characters 58-62
		$this->unrecoverableErrorStack = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:52: characters 44-48
		$this->unrecoverableError = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:72: characters 3-33
		$this->buddySuites = $buddySuites;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:73: characters 3-86
		$this->reporter = ($reporter === null ? new ConsoleReporter() : $reporter);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:74: characters 3-26
		$this->oldLog = Log::$trace;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:75: lines 75-78
		$this->includeMode = \Lambda::exists($buddySuites, function ($suite) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:76: characters 4-54
			$metaData = Meta::getType(\Type::getClass($suite));
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:77: characters 4-52
			return \Reflect::hasField($metaData, "includeMode");
		});
	}

	/**
	 * @return bool
	 */
	public function failed () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:156: characters 27-49
		return !$this->allTestsPassed;
	}

	/**
	 * @param \Array_hx $arr
	 * 
	 * @return \Array_hx
	 */
	public function flatten ($arr) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 10-39
		$_g = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 11-38
		$_g1 = 0;
		while ($_g1 < $arr->length) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 15-16
			$a = ($arr->arr[$_g1] ?? null);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 11-38
			++$_g1;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 25-38
			$_g11 = 0;
			while ($_g11 < $a->length) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 29-30
				$b = ($a->arr[$_g11] ?? null);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 25-38
				++$_g11;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 37-38
				$_g->arr[$_g->length] = $b;
				++$_g->length;

			}

		}

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:312: characters 10-39
		return $_g;
	}

	/**
	 * @param mixed $err
	 * 
	 * @return void
	 */
	public function haveUnrecoverableError ($err) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:534: characters 3-27
		$this->unrecoverableError = $err;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:535: characters 3-55
		$this->unrecoverableErrorStack = CallStack::exceptionStack();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:536: characters 3-29
		$this->runCompleted->resolve($this);
	}

	/**
	 * @param object $funcs
	 * 
	 * @return bool
	 */
	public function isSync ($funcs) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:316: characters 13-18
		$f = $funcs->iterator();
		while ($f->hasNext()) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:316: lines 316-319
			$f1 = $f->next();
			if ($f1->index === 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:317: characters 19-31
				return false;
			}
		}

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:320: characters 3-14
		return true;
	}

	/**
	 * @param BuddySuite $buddySuite
	 * @param TestSuite $testSuite
	 * @param \Array_hx $beforeEachStack
	 * @param \Array_hx $afterEachStack
	 * @param TestSpec $testSpec
	 * @param \Closure $done
	 * 
	 * @return object
	 */
	public function mapTestSpec ($buddySuite, $testSuite, $beforeEachStack, $afterEachStack, $testSpec, $done) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:323: lines 323-531
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:333: characters 3-28
		$hasCompleted = false;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:334: characters 3-54
		$oldFail = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:336: lines 336-341
		$oldFail = $buddySuite->fail = function ($err = "Exception", $p = null)  use (&$oldFail, &$hasCompleted, &$buddySuite, &$done) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:338: lines 338-340
			if ($err === null) {
				$err = "Exception";
			}
			if (!$hasCompleted && Boot::equal($oldFail, $buddySuite->fail)) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:339: characters 5-20
				$done($err, null);
			}
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:342: lines 342-344
		$oldPending = $buddySuite->pending = function ($message = null, $p1 = null)  use (&$done) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:343: characters 4-43
			$done("Cannot call pending here.", null);
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:346: lines 346-530
		$__hx__switch = ($testSpec->index);
		if ($__hx__switch === 0) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:347: characters 18-27
			$testSuite1 = $testSpec->params[0];
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:349: lines 349-353
			$result = $this->mapTestSuite($buddySuite, $testSuite1, $beforeEachStack, $afterEachStack, function ($err1, $newSuite)  use (&$done) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:350: characters 6-49
				if (($err1 === null) && ($newSuite === null)) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:350: characters 43-49
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:351: lines 351-352
				if ($err1 !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:351: characters 23-38
					$done($err1, null);
				} else {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:352: characters 11-39
					$done(null, Step::TSuite($newSuite));
				}
			});
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:354: lines 354-355
			if ($result !== null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:354: characters 25-83
				return new HxAnon([
					"error" => $result->error,
					"step" => Step::TSuite($result->suite),
				]);
			} else {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:355: characters 10-21
				return null;
			}
		} else if ($__hx__switch === 1) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:357: characters 32-36
			$time = $testSpec->params[4];
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:357: characters 27-30
			$pos = $testSpec->params[3];
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:357: characters 18-22
			$test = $testSpec->params[1];
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:357: characters 12-16
			$desc = $testSpec->params[0];
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:360: characters 5-77
			$spec = SelfTest::$lastSpec = new Spec($desc, $pos->fileName);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:362: characters 5-47
			$beforeEach = $this->flatten($beforeEachStack);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:363: characters 5-45
			$afterEach = $this->flatten($afterEachStack);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:365: characters 5-62
			$eachIsSync = $this->isSync($beforeEach) && $this->isSync($afterEach);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:367: lines 367-370
			$returnSync = null;
			if ($test === null) {
				$returnSync = $eachIsSync;
			} else {
				$__hx__switch = ($test->index);
				if ($__hx__switch === 0) {
					$returnSync = false;
				} else if ($__hx__switch === 1) {
					$returnSync = $eachIsSync;
				}
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:373: lines 373-383
			if (!BuddySuite::$useDefaultTrace) {
				Log::$trace = function ($v, $pos1 = null)  use (&$spec, &$value) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:374: lines 374-382
					if ($pos1 === null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:375: characters 7-38
						$_this = $spec->traces;
						$x = \Std::string($v);
						$_this->arr[$_this->length] = $x;
						++$_this->length;
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:377: lines 377-379
						$output = null;
						if ($pos1->customParams !== null) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:378: characters 10-29
							$output1 = (\Std::string($v)??'null') . ",";
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:378: characters 32-88
							$_this1 = $pos1->customParams;
							$f = function ($v2) {
								#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:378: characters 66-87
								return \Std::string($v2);
							};
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:378: characters 32-88
							$result1 = [];
							$collection = $_this1->arr;
							foreach ($collection as $key => $value) {
								$result1[] = $f($value);
							}

							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:377: lines 377-379
							$output = ($output1??'null') . (\Array_hx::wrap($result1)->join(",")??'null');
						} else {
							$output = \Std::string($v);
						}
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:381: characters 7-76
						$_this2 = $spec->traces;
						$_this2->arr[$_this2->length] = ($pos1->fileName??'null') . ":" . ($pos1->lineNumber??'null') . ": " . ($output??'null');
						++$_this2->length;

					}
				};
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:385: lines 385-389
			$reportFailure = function ($error, $stack)  use (&$spec, &$hasCompleted) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:386: characters 6-30
				if ($hasCompleted) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:386: characters 24-30
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:387: characters 6-26
				$spec->status = SpecStatus::Failed();
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:388: characters 6-51
				$_this3 = $spec->failures;
				$x1 = new Failure($error, $stack);
				$_this3->arr[$_this3->length] = $x1;
				++$_this3->length;

			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:391: lines 391-422
			$specCompleted = function ($status)  use (&$oldFail, &$spec, &$afterEach, &$hasCompleted, &$_gthis, &$buddySuite, &$done, &$returnSync, &$oldPending) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:392: characters 6-35
				if ($hasCompleted) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:392: characters 24-35
					return null;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:393: characters 6-25
				$hasCompleted = true;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:395: characters 6-53
				if ($spec->status === SpecStatus::Unknown()) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:395: characters 33-53
					$spec->status = $status;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:398: characters 6-56
				if (!BuddySuite::$useDefaultTrace) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:398: characters 38-56
					Log::$trace = $_gthis->oldLog;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:399: characters 6-31
				$buddySuite->fail = $oldFail;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:400: characters 6-37
				$buddySuite->pending = $oldPending;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:402: characters 6-28
				$syncResult = null;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:405: lines 405-419
				$_gthis->runTestFuncs($afterEach, function ($err2)  use (&$syncResult, &$spec, &$_gthis, &$done, &$returnSync) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:406: lines 406-418
					if ($returnSync) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:407: characters 8-73
						$syncResult = new HxAnon([
							"error" => $err2,
							"step" => ($err2 === null ? Step::TSpec($spec) : null),
						]);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:408: characters 8-31
						$_gthis->reporter->progress($spec);
					} else if ($err2 !== null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:410: characters 25-40
						$done($err2, null);
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:413: characters 9-41
						$r = $_gthis->reporter->progress($spec);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:414: lines 414-416
						$r->then(function ($_)  use (&$spec, &$done) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:415: characters 10-33
							$done(null, Step::TSpec($spec));
						});
					}
				});
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:421: characters 6-23
				return $syncResult;
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:425: lines 425-427
			if ($test === null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:426: characters 6-35
				return $specCompleted(SpecStatus::Pending());
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:431: lines 431-433
			SuitesRunner::$currentTest = function ($testStatus, $error1, $stack1)  use (&$reportFailure) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:432: characters 6-57
				if ($testStatus !== true) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:432: characters 30-57
					$reportFailure($error1, $stack1);
				}
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:476: characters 5-45
			$_syncResult = null;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:477: characters 5-41
			$_startTime = microtime(true);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:479: lines 479-484
			$setSyncResult = function ($status1)  use (&$spec, &$_startTime, &$_syncResult, &$returnSync) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:480: characters 6-52
				if (!$returnSync || ($_syncResult !== null)) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:480: characters 46-52
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:481: characters 6-26
				$_syncResult = $status1;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:483: characters 6-49
				$spec->time = microtime(true) - $_startTime;
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:487: lines 487-490
			$buddySuite->fail = function ($err3 = "Manually", $p2 = null)  use (&$reportFailure, &$specCompleted, &$setSyncResult) {
				if ($err3 === null) {
					$err3 = "Manually";
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:488: characters 25-43
				$tmp = SuitesRunner::posInfosToStack($p2);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:488: characters 6-44
				$reportFailure($err3, $tmp);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:489: characters 20-41
				$tmp1 = $specCompleted(SpecStatus::Failed());
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:489: characters 6-42
				$setSyncResult($tmp1);
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:492: lines 492-496
			$buddySuite->pending = function ($message1 = null, $p3 = null)  use (&$spec, &$specCompleted, &$setSyncResult) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:493: characters 6-88
				$msg = ($p3->fileName??'null') . ":" . ($p3->lineNumber??'null') . ((($message1 !== null ? ": " . ($message1??'null') : ""))??'null');
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:494: characters 6-27
				$_this4 = $spec->traces;
				$_this4->arr[$_this4->length] = $msg;
				++$_this4->length;

				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:495: characters 20-42
				$tmp2 = $specCompleted(SpecStatus::Pending());
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:495: characters 6-43
				$setSyncResult($tmp2);
			};
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:499: lines 499-526
			$this->runTestFuncs($beforeEach, function ($err4)  use (&$reportFailure, &$specCompleted, &$e, &$setSyncResult, &$done, &$test, &$returnSync) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:500: lines 500-504
				if ($err4 !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:501: lines 501-502
					if ($returnSync) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:501: characters 22-63
						$setSyncResult(new HxAnon([
							"error" => $err4,
							"step" => null,
						]));
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:502: characters 12-27
						$done($err4, null);
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:503: characters 7-13
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:506: lines 506-513
				$runTestFunc = function ($func, $done1)  use (&$e) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:507: lines 507-512
					try {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:507: lines 507-510
						$__hx__switch = ($func->index);
						if ($__hx__switch === 0) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:508: characters 19-20
							$f1 = $func->params[0];
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:508: characters 23-47
							$f1(function ()  use (&$done1) {
								#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:508: characters 36-46
								$done1(null);
							});
						} else if ($__hx__switch === 1) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:509: characters 18-19
							$f2 = $func->params[0];
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:509: characters 22-25
							$f2();
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:509: characters 27-37
							$done1(null);

						}
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e = $__hx__real_e;
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:511: characters 8-15
						$done1($e);
					}
				};
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:515: lines 515-525
				$runTestFunc($test, function ($err5)  use (&$reportFailure, &$specCompleted, &$setSyncResult) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:519: lines 519-524
					if ($err5 !== null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:520: characters 27-53
						$tmp3 = CallStack::exceptionStack();
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:520: characters 8-54
						$reportFailure($err5, $tmp3);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:521: characters 22-43
						$tmp4 = $specCompleted(SpecStatus::Failed());
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:521: characters 8-44
						$setSyncResult($tmp4);
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:524: characters 22-43
						$tmp5 = $specCompleted(SpecStatus::Passed());
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:524: characters 8-44
						$setSyncResult($tmp5);
					}
				});
			});
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:529: characters 5-23
			return $_syncResult;
		}
	}

	/**
	 * @param BuddySuite $buddySuite
	 * @param TestSuite $testSuite
	 * @param \Array_hx $beforeEachStack
	 * @param \Array_hx $afterEachStack
	 * @param \Closure $done
	 * 
	 * @return object
	 */
	public function mapTestSuite ($buddySuite, $testSuite, $beforeEachStack, $afterEachStack, $done) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:230: lines 230-292
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:237: characters 3-88
		$currentSuite = SelfTest::$lastSuite = new Suite($testSuite->description);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:239: characters 3-53
		$x = \Lambda::array($testSuite->beforeEach);
		$beforeEachStack->arr[$beforeEachStack->length] = $x;
		++$beforeEachStack->length;

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:240: characters 3-54
		$x1 = \Lambda::array($testSuite->afterEach);
		$afterEachStack->length = array_unshift($afterEachStack->arr, $x1);

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:242: characters 3-75
		$allSync = $this->isSync($testSuite->beforeAll) && $this->isSync($testSuite->afterAll);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:243: characters 3-39
		$result = null;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:244: characters 3-27
		$syncResultCount = 0;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:247: lines 247-288
		$this->runTestFuncs($testSuite->beforeAll, function ($err)  use (&$currentSuite, &$testSuite, &$_gthis, &$buddySuite, &$afterEachStack, &$allSync, &$beforeEachStack, &$result, &$done, &$syncResultCount) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:248: lines 248-252
			if ($err !== null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:249: lines 249-250
				if ($_gthis->isSync($testSuite->beforeAll)) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:249: characters 38-82
					$result = new HxAnon([
						"error" => $err,
						"suite" => $currentSuite,
					]);
				} else {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:250: characters 10-33
					$done($err, $currentSuite);
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:251: characters 5-11
				return;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:255: lines 255-287
			\AsyncTools::aMapSeries($testSuite->specs, function ($testSpec, $cb)  use (&$testSuite, &$_gthis, &$buddySuite, &$afterEachStack, &$beforeEachStack, &$syncResultCount) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:256: characters 5-101
				$result2 = $_gthis->mapTestSpec($buddySuite, $testSuite, $beforeEachStack, $afterEachStack, $testSpec, $cb);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:257: lines 257-260
				if ($result2 !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:258: characters 6-23
					$syncResultCount += 1;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:259: characters 6-37
					$cb($result2->error, $result2->step);
				}
			}, function ($err1, $testSteps)  use (&$currentSuite, &$testSuite, &$_gthis, &$afterEachStack, &$allSync, &$beforeEachStack, &$result, &$done, &$syncResultCount) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:264: characters 26-61
				$allSync = $allSync && ($testSteps->length === $syncResultCount);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:266: lines 266-270
				if ($err1 !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:267: lines 267-268
					if ($allSync) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:267: characters 19-63
						$result = new HxAnon([
							"error" => $err1,
							"suite" => $currentSuite,
						]);
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:268: characters 11-34
						$done($err1, $currentSuite);
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:269: characters 6-12
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:273: lines 273-286
				$_gthis->runTestFuncs($testSuite->afterAll, function ($err2)  use (&$currentSuite, &$afterEachStack, &$allSync, &$beforeEachStack, &$result, &$done, &$testSteps) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:274: lines 274-278
					if ($err2 !== null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:275: lines 275-276
						if ($allSync) {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:275: characters 20-64
							$result = new HxAnon([
								"error" => $err2,
								"suite" => $currentSuite,
							]);
						} else {
							#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:276: characters 12-35
							$done($err2, $currentSuite);
						}
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:277: characters 7-13
						return;
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:280: characters 6-36
					$currentSuite->steps = $testSteps;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:281: characters 6-27
					if ($beforeEachStack->length > 0) {
						$beforeEachStack->length--;
					}
					array_pop($beforeEachStack->arr);

					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:282: characters 6-28
					if ($afterEachStack->length > 0) {
						$afterEachStack->length--;
					}
					array_shift($afterEachStack->arr);

					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:284: lines 284-285
					if ($allSync) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:284: characters 19-64
						$result = new HxAnon([
							"error" => null,
							"suite" => $currentSuite,
						]);
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:285: characters 11-35
						$done(null, $currentSuite);
					}
				});
			});
		});
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:290: characters 3-39
		if ($result !== null) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:290: characters 23-39
			$done(null, null);
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:291: characters 3-16
		return $result;
	}

	/**
	 * @return Promise
	 */
	public function run () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:81: lines 81-100
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:86: characters 3-46
		$this->runCompleted = new Deferred();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:87: characters 3-52
		$runCompletedPromise = $this->runCompleted->promise();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:89: lines 89-97
		$this->runDescribes(function ($err)  use (&$_gthis) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:90: lines 90-93
			if ($err !== null) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:91: characters 5-32
				$_gthis->haveUnrecoverableError($err);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:92: characters 5-11
				return;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:95: characters 4-39
			if ($_gthis->includeMode) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:95: characters 21-39
				$_gthis->startIncludeMode();
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:96: characters 4-14
			$_gthis->startRun();
		});
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:99: characters 3-29
		return $runCompletedPromise;
	}

	/**
	 * @param \Closure $cb
	 * 
	 * @return void
	 */
	public function runDescribes ($cb) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:102: lines 102-154
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:103: characters 3-63
		$asyncQueue = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:104: characters 3-52
		$syncQueue = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:106: lines 106-124
		$processSuiteDescribes = function ($suite)  use (&$syncQueue, &$asyncQueue) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:107: lines 107-123
			while (!\Lambda::empty($suite->describeQueue)) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:108: characters 19-44
				$_this = $suite->describeQueue;
				if ($_this->length > 0) {
					$_this->length--;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:108: characters 5-45
				$current = array_pop($_this->arr);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:110: characters 12-24
				$_g = $current->spec;
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 0) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:111: characters 17-18
					$f = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:111: lines 111-115
					$asyncQueue->arr[$asyncQueue->length] = new HxAnon([
						"buddySuite" => $suite,
						"testSuite" => $current->suite,
						"run" => $f,
					]);
					++$asyncQueue->length;

				} else if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:117: characters 16-17
					$f1 = $_g->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:117: lines 117-121
					$syncQueue->arr[$syncQueue->length] = new HxAnon([
						"buddySuite" => $suite,
						"testSuite" => $current->suite,
						"run" => $f1,
					]);
					++$syncQueue->length;

				}

			}
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:126: lines 126-151
		$processBuddySuites = null;
		$processBuddySuites = function ()  use (&$syncQueue, &$err, &$_gthis, &$processSuiteDescribes, &$processBuddySuites, &$cb, &$asyncQueue) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:128: characters 23-34
			$buddySuite = $_gthis->buddySuites->iterator();
			while ($buddySuite->hasNext()) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:128: characters 4-69
				$buddySuite1 = $buddySuite->next();
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:128: characters 36-69
				$processSuiteDescribes($buddySuite1);
			}

			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:130: lines 130-150
			if ($syncQueue->length > 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:131: lines 131-136
				try {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:131: lines 131-134
					$_g1 = 0;
					while ($_g1 < $syncQueue->length) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:131: characters 14-18
						$test = ($syncQueue->arr[$_g1] ?? null);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:131: lines 131-134
						++$_g1;
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:132: characters 6-51
						$test->buddySuite->currentSuite = $test->testSuite;
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:133: characters 6-16
						$test->run();
					}
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$err = $__hx__real_e;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:135: characters 13-20
					$cb($err);
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:135: characters 6-20
					return;
				}
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:138: characters 5-19
				$syncQueue = new \Array_hx();
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:139: characters 5-25
				$processBuddySuites();
			} else if ($asyncQueue->length > 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:141: lines 141-148
				\AsyncTools::aEachSeries($asyncQueue, function ($test1, $cb1) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:142: characters 6-51
					$test1->buddySuite->currentSuite = $test1->testSuite;
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:143: characters 6-35
					$test1->run(function ()  use (&$cb1) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:143: characters 26-34
						$cb1(null);
					});
				}, function ($err1)  use (&$processBuddySuites, &$cb, &$asyncQueue) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:145: characters 6-37
					if ($err1 !== null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:145: characters 30-37
						$cb($err1);
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:145: characters 23-37
						return;
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:146: characters 6-21
					$asyncQueue = new \Array_hx();
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:147: characters 6-26
					$processBuddySuites();
				});
			} else {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:150: characters 5-13
				$cb(null);
			}
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:153: characters 3-23
		$processBuddySuites();
	}

	/**
	 * @param object $funcs
	 * @param \Closure $done
	 * 
	 * @return void
	 */
	public function runTestFuncs ($funcs, $done) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:295: characters 3-18
		$syncQ = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:296: characters 3-19
		$asyncQ = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:298: characters 15-20
		$func = $funcs->iterator();
		while ($func->hasNext()) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:298: lines 298-301
			$func1 = $func->next();
			$__hx__switch = ($func1->index);
			if ($__hx__switch === 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:299: characters 15-16
				$f = $func1->params[0];
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:299: characters 19-33
				$asyncQ->arr[$asyncQ->length] = $f;
				++$asyncQ->length;

			} else if ($__hx__switch === 1) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:300: characters 14-15
				$f1 = $func1->params[0];
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:300: characters 18-31
				$syncQ->arr[$syncQ->length] = $f1;
				++$syncQ->length;

			}
		}

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:303: lines 303-304
		try {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:303: characters 7-27
			$_g = 0;
			while ($_g < $syncQ->length) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:303: characters 12-13
				$f2 = ($syncQ->arr[$_g] ?? null);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:303: characters 7-27
				++$_g;
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:303: characters 24-27
				$f2();
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$err = $__hx__real_e;
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:304: characters 32-41
			$done($err);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:304: characters 25-41
			return;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:306: lines 306-308
		\AsyncTools::aEachSeries($asyncQ, function ($f3, $done1) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:307: characters 4-24
			$f3(function ()  use (&$done1) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:307: characters 17-23
				$done1();
			});
		}, $done);
	}

	/**
	 * @return void
	 */
	public function startIncludeMode () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:209: lines 209-220
		$traverse = null;
		$traverse = function ($suite)  use (&$traverse) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:210: lines 210-218
			$suite->specs = $suite->specs->filter(function ($spec)  use (&$traverse) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:211: lines 211-217
				$__hx__switch = ($spec->index);
				if ($__hx__switch === 0) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:212: characters 27-35
					$included = $spec->params[1];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:212: characters 20-25
					$suite1 = $spec->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:213: lines 213-214
					if ($included) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:213: characters 21-32
						return true;
					} else {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:214: characters 12-34
						return $traverse($suite1);
					}
				} else if ($__hx__switch === 1) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:215: characters 23-31
					$included1 = $spec->params[2];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:215: characters 14-18
					$desc = $spec->params[0];
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:216: characters 7-22
					return $included1;
				}
			});
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:219: characters 4-33
			return $suite->specs->length > 0;
		};
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:222: lines 222-227
		$this->buddySuites = \Lambda::filter($this->buddySuites, function ($buddySuite)  use (&$traverse) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:223: characters 4-60
			$suiteMeta = Meta::getType(\Type::getClass($buddySuite));
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:224: characters 4-59
			if (\Reflect::hasField($suiteMeta, "include")) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:224: characters 48-59
				return true;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:226: characters 4-37
			return $traverse($buddySuite->suite);
		});
	}

	/**
	 * @return void
	 */
	public function startRun () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:161: lines 161-205
		$_gthis = $this;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:163: characters 3-28
		$r = $this->reporter->start();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:164: lines 164-204
		$r->then(function ($go)  use (&$_gthis) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:165: lines 165-169
			if (!$go) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:166: characters 5-38
				$r1 = $_gthis->reporter->done(new \Array_hx(), false);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:167: characters 5-51
				$r1->then(function ($_)  use (&$_gthis) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:167: characters 24-50
					$_gthis->runCompleted->resolve($_gthis);
				});
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:168: characters 5-11
				return;
			}
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:171: characters 4-31
			$beforeEachStack = \Array_hx::wrap([new \Array_hx()]);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:172: characters 4-30
			$afterEachStack = \Array_hx::wrap([new \Array_hx()]);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:174: lines 174-203
			\AsyncTools::aMapSeries($_gthis->buddySuites, function ($buddySuite, $done)  use (&$_gthis, &$afterEachStack, &$beforeEachStack) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:175: lines 175-183
				$suiteDone = function ($err, $suite)  use (&$done) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:176: characters 6-46
					if (($err === null) && ($suite === null)) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:176: characters 40-46
						return;
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:178: lines 178-181
					if ($err !== null) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:179: characters 7-24
						$suite->error = $err;
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:180: characters 7-47
						$suite->stack = CallStack::exceptionStack();
					}
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:182: characters 6-22
					$done($err, $suite);
				};
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:185: lines 185-191
				$syncSuite = $_gthis->mapTestSuite($buddySuite, $buddySuite->suite, $beforeEachStack, $afterEachStack, $suiteDone);
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:192: lines 192-194
				if ($syncSuite !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:193: characters 6-49
					$suiteDone($syncSuite->error, $syncSuite->suite);
				}
			}, function ($err1, $suites)  use (&$_gthis) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:197: lines 197-202
				if ($err1 !== null) {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:197: characters 22-49
					$_gthis->haveUnrecoverableError($err1);
				} else {
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:199: characters 6-77
					$_gthis->allTestsPassed = !\Lambda::exists($suites, function ($suite1) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:199: characters 54-76
						return !$suite1->passed();
					});
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:200: characters 6-52
					$r2 = $_gthis->reporter->done($suites, $_gthis->allTestsPassed);
					#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:201: characters 6-52
					$r2->then(function ($_1)  use (&$_gthis) {
						#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:201: characters 25-51
						$_gthis->runCompleted->resolve($_gthis);
					});
				}
			});
		});
	}

	/**
	 * @return int
	 */
	public function statusCode () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:157: characters 38-54
		if ($this->failed()) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:157: characters 49-50
			return 1;
		} else {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/SuitesRunner.hx:157: characters 53-54
			return 0;
		}
	}
}

Boot::registerClass(SuitesRunner::class, 'buddy.SuitesRunner');
