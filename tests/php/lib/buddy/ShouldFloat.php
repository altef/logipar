<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;

class ShouldFloat extends Should {

	/**
	 * @param float $i
	 * 
	 * @return ShouldFloat
	 */
	static public function should ($i) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:145: characters 3-28
		return new ShouldFloat($i);
	}

	/**
	 * @param float $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:150: characters 3-24
		if ($inverse === null) {
			$inverse = false;
		}
		parent::__construct($value, $inverse);
	}

	/**
	 * @param float $expected
	 * @param float $precision
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beCloseTo ($expected, $precision = 2, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:175: lines 175-186
		if ($precision === null) {
			$precision = 2;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:178: characters 3-41
		$diff = abs($expected - $this->value);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:179: characters 3-48
		$threshold = (10 ** (-$precision)) / 2;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:180: characters 3-31
		$expr = $diff < $threshold;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:182: lines 182-185
		$this->test($expr, $p, "Expected close to " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected " . ($this->quote($this->value)??'null') . " not to be close to " . ($this->quote($expected)??'null'));
	}

	/**
	 * @param float $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beGreaterThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:168: lines 168-171
		$this->test($this->value > $expected, $p, "Expected greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @param float $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beLessThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:160: lines 160-163
		$this->test($this->value < $expected, $p, "Expected less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @return ShouldFloat
	 */
	public function get_not () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:154: characters 31-70
		return new ShouldFloat($this->value, !$this->inverse);
	}
}

Boot::registerClass(ShouldFloat::class, 'buddy.ShouldFloat');
Boot::registerGetters('buddy\\ShouldFloat', [
	'not' => true
]);
