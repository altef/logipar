<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;
use \php\_Boot\HxException;

class Suite {
	/**
	 * @var string
	 */
	public $description;
	/**
	 * @var mixed
	 */
	public $error;
	/**
	 * @var \Array_hx
	 */
	public $stack;
	/**
	 * @var \Array_hx
	 */
	public $steps;

	/**
	 * @param string $description
	 * 
	 * @return void
	 */
	public function __construct ($description) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:45: characters 64-86
		$this->stack = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:43: characters 64-81
		$this->steps = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:86: characters 3-33
		if ($description === null) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:86: characters 28-33
			throw new HxException("Suite requires a description.");
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:87: characters 3-33
		$this->description = $description;
	}

	/**
	 * @return \Array_hx
	 */
	public function get_specs () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:49: characters 3-19
		$output = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:50: lines 50-53
		$_g = 0;
		$_g1 = $this->steps;
		while ($_g < $_g1->length) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:50: characters 7-11
			$step = ($_g1->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:50: lines 50-53
			++$_g;
			if ($step->index === 1) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:51: characters 15-16
				$s = $step->params[0];
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:51: characters 19-33
				$output->arr[$output->length] = $s;
				++$output->length;

			}
		}

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:54: characters 3-16
		return $output;
	}

	/**
	 * @return \Array_hx
	 */
	public function get_suites () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:59: characters 3-19
		$output = new \Array_hx();
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:60: lines 60-63
		$_g = 0;
		$_g1 = $this->steps;
		while ($_g < $_g1->length) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:60: characters 7-11
			$step = ($_g1->arr[$_g] ?? null);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:60: lines 60-63
			++$_g;
			if ($step->index === 0) {
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:61: characters 16-17
				$s = $step->params[0];
				#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:61: characters 20-34
				$output->arr[$output->length] = $s;
				++$output->length;

			}
		}

		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:64: characters 3-16
		return $output;
	}

	/**
	 * Returns true if this suite and all below it passed.
	 * 
	 * @return bool
	 */
	public function passed () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:81: characters 3-78
		if (\Lambda::exists($this->get_specs(), function ($spec) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:81: characters 35-63
			return $spec->status === SpecStatus::Failed();
		})) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:81: characters 66-78
			return false;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:82: characters 3-64
		return !\Lambda::exists($this->get_suites(), function ($suite) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:82: characters 41-63
			return !$suite->passed();
		});
	}
}

Boot::registerClass(Suite::class, 'buddy.Suite');
Boot::registerGetters('buddy\\Suite', [
	'suites' => true,
	'specs' => true
]);
