<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;

class ShouldInt extends Should {

	/**
	 * @param int $i
	 * 
	 * @return ShouldInt
	 */
	static public function should ($i) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:68: characters 3-26
		return new ShouldInt($i);
	}

	/**
	 * @param int $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:73: characters 3-24
		if ($inverse === null) {
			$inverse = false;
		}
		parent::__construct($value, $inverse);
	}

	/**
	 * @param int $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beGreaterThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:91: lines 91-94
		$this->test($this->value > $expected, $p, "Expected greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @param int $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beLessThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:83: lines 83-86
		$this->test($this->value < $expected, $p, "Expected less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @return ShouldInt
	 */
	public function get_not () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:77: characters 31-68
		return new ShouldInt($this->value, !$this->inverse);
	}
}

Boot::registerClass(ShouldInt::class, 'buddy.ShouldInt');
Boot::registerGetters('buddy\\ShouldInt', [
	'not' => true
]);
