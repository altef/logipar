<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;
use \haxe\ds\List_hx;
use \php\_Boot\HxException;

class Should {
	/**
	 * @var bool
	 */
	public $inverse;
	/**
	 * @var mixed
	 */
	public $value;

	/**
	 * @param mixed $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:528: lines 528-531
		if ($inverse === null) {
			$inverse = false;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:529: characters 3-21
		$this->value = $value;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:530: characters 3-25
		$this->inverse = $inverse;
	}

	/**
	 * Test for equality between "expected" value types (bool, int, int64, float, string), identity for other (reference) types
	 * 
	 * @param mixed $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function be ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:544: characters 3-34
		$result = Boot::equal($this->value, $expected);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:546: lines 546-549
		$this->test($result, $p, "Expected " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Didn't expect " . ($this->quote($expected)??'null') . " but was equal to that");
	}

	/**
	 * @param mixed $type
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beType ($type, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:554: lines 554-557
		$this->test(Boot::is($this->value, $type), $p, "Expected " . ($this->quote($this->value)??'null') . " to be type " . ($this->quote($type)??'null'), "Expected " . ($this->quote($this->value)??'null') . " not to be type " . ($this->quote($type)??'null'));
	}

	/**
	 * @param string $error
	 * @param string $errorInverted
	 * @param object $p
	 * 
	 * @return void
	 */
	public function fail ($error, $errorInverted, $p) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:569: characters 35-66
		$tmp = ($this->inverse ? $errorInverted : $error);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:569: characters 68-99
		$tmp1 = SuitesRunner::posInfosToStack($p);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:569: characters 3-100
		(SuitesRunner::$currentTest)(false, $tmp, $tmp1);
	}

	/**
	 * @param mixed $v
	 * 
	 * @return string
	 */
	public function quote ($v) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:562: characters 3-39
		if (Boot::is($v, Boot::getClass('String'))) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:562: characters 26-39
			return "\"" . (\Std::string($v)??'null') . "\"";
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:563: characters 3-58
		if (($v instanceof List_hx)) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:563: characters 24-58
			return \Std::string(\Lambda::array($v));
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:564: characters 3-23
		return \Std::string($v);
	}

	/**
	 * @param bool $expr
	 * @param object $p
	 * @param string $error
	 * @param string $errorInverted
	 * 
	 * @return void
	 */
	public function test ($expr, $p, $error, $errorInverted) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:574: characters 3-46
		if (SuitesRunner::$currentTest === null) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:574: characters 41-46
			throw new HxException("SuitesRunner.currentTest was null");
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:576: lines 576-579
		if (!$this->inverse) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:577: characters 42-73
			$tmp = SuitesRunner::posInfosToStack($p);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:577: characters 4-74
			(SuitesRunner::$currentTest)($expr, $error, $tmp);
		} else {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:579: characters 51-82
			$tmp1 = SuitesRunner::posInfosToStack($p);
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:579: characters 4-83
			(SuitesRunner::$currentTest)(!$expr, $errorInverted, $tmp1);
		}
	}
}

Boot::registerClass(Should::class, 'buddy.Should');
