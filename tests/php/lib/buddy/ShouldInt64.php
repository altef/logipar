<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \haxe\_Int64\___Int64;
use \php\Boot;
use \haxe\_Int32\Int32_Impl_;

class ShouldInt64 extends Should {

	/**
	 * @param ___Int64 $i
	 * 
	 * @return ShouldInt64
	 */
	static public function should ($i) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:102: characters 3-28
		return new ShouldInt64($i);
	}

	/**
	 * @param ___Int64 $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:107: characters 3-24
		if ($inverse === null) {
			$inverse = false;
		}
		parent::__construct($value, $inverse);
	}

	/**
	 * @param ___Int64 $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function be ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:117: characters 16-46
		$b = $this->value;
		$v = (($expected->high - $b->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($expected->low, $b->low));
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:117: characters 3-52
		$result = (($expected->high < 0 ? ($b->high < 0 ? $v : -1) : ($b->high >= 0 ? $v : 1))) === 0;
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:118: lines 118-121
		$this->test($result, $p, "Expected " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Didn't expect " . ($this->quote($expected)??'null') . " but was equal to that");
	}

	/**
	 * @param ___Int64 $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beGreaterThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:134: characters 8-24
		$a = $this->value;
		$v = (($a->high - $expected->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $expected->low));
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:134: lines 134-137
		$this->test((($a->high < 0 ? ($expected->high < 0 ? $v : -1) : ($expected->high >= 0 ? $v : 1))) > 0, $p, "Expected greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not greater than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @param ___Int64 $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function beLessThan ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:126: characters 8-24
		$a = $this->value;
		$v = (($a->high - $expected->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		$v = ($v !== 0 ? $v : Int32_Impl_::ucompare($a->low, $expected->low));
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:126: lines 126-129
		$this->test((($a->high < 0 ? ($expected->high < 0 ? $v : -1) : ($expected->high >= 0 ? $v : 1))) < 0, $p, "Expected less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Expected not less than " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'));
	}

	/**
	 * @return ShouldInt64
	 */
	public function get_not () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:111: characters 31-70
		return new ShouldInt64($this->value, !$this->inverse);
	}
}

Boot::registerClass(ShouldInt64::class, 'buddy.ShouldInt64');
Boot::registerGetters('buddy\\ShouldInt64', [
	'not' => true
]);
