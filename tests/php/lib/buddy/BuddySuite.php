<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxException;

class BuddySuite {
	/**
	 * @var bool
	 * If true, the default Log.trace will be used. Used for debugging.
	 */
	static public $useDefaultTrace = false;

	/**
	 * @var TestSuite
	 */
	public $currentSuite;
	/**
	 * @var \Array_hx
	 */
	public $describeQueue;
	/**
	 * @var \Closure
	 * Fails the current Spec, with an optional error message.
	 */
	public $fail;
	/**
	 * @var \Closure
	 * Makes the current Spec pending, with an optional message (currently does nothing).
	 */
	public $pending;
	/**
	 * @var TestSuite
	 * Top-level test suite, used in reporting.
	 */
	public $suite;

	/**
	 * @return void
	 */
	public function __construct () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:175: characters 3-43
		$this->suite = $this->currentSuite = new TestSuite("");
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:176: characters 3-66
		$this->describeQueue = new \Array_hx();
	}

	/**
	 * Defines a test Suite, containing Specs and other Suites.
	 * @param	description Name that will be reported
	 * @param	spec A block or function of additional defines
	 * @param	hasInclude Only used internally
	 * 
	 * @param string $description
	 * @param TestFunc $spec
	 * @param bool $_hasInclude
	 * 
	 * @return void
	 */
	public function describe ($description, $spec, $_hasInclude = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:190: lines 190-196
		if ($_hasInclude === null) {
			$_hasInclude = false;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:191: characters 3-42
		$suite = new TestSuite($description);
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:193: characters 3-64
		$this->currentSuite->specs->add(TestSpec::Describe($suite, $_hasInclude));
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:195: characters 3-53
		$_this = $this->describeQueue;
		$_this->arr[$_this->length] = new HxAnon([
			"suite" => $suite,
			"spec" => $spec,
		]);
		++$_this->length;

	}

	/**
	 * Defines a Spec, a test of conditions. Should is used for verifying the test itself.
	 * @param	desc Test description
	 * @param	spec A block or function of tests, or leave out for pending
	 * @param	hasInclude Used internally only
	 * 
	 * @param string $desc
	 * @param TestFunc $spec
	 * @param bool $_hasInclude
	 * @param object $pos
	 * @param float $time
	 * 
	 * @return void
	 */
	public function it ($desc, $spec = null, $_hasInclude = false, $pos = null, $time = 0) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:246: lines 246-249
		if ($_hasInclude === null) {
			$_hasInclude = false;
		}
		if ($time === null) {
			$time = 0;
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:247: characters 3-35
		if ($this->currentSuite === $this->suite) {
			#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:247: characters 30-35
			throw new HxException("Cannot use 'it' outside of a describe block.");
		}
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/BuddySuite.hx:248: characters 3-74
		$this->currentSuite->specs->add(TestSpec::It($desc, $spec, $_hasInclude, $pos, $time));
	}
}

Boot::registerClass(BuddySuite::class, 'buddy.BuddySuite');
