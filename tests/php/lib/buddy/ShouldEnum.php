<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace buddy;

use \php\Boot;

class ShouldEnum extends Should {

	/**
	 * @param mixed $e
	 * 
	 * @return ShouldEnum
	 */
	static public function should ($e) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:37: characters 3-27
		return new ShouldEnum($e);
	}

	/**
	 * @param mixed $value
	 * @param bool $inverse
	 * 
	 * @return void
	 */
	public function __construct ($value, $inverse = false) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:42: characters 3-24
		if ($inverse === null) {
			$inverse = false;
		}
		parent::__construct($value, $inverse);
	}

	/**
	 * @param mixed $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function be ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:52: characters 3-21
		$this->equal($expected, $p);
	}

	/**
	 * @param mixed $expected
	 * @param object $p
	 * 
	 * @return void
	 */
	public function equal ($expected, $p = null) {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:57: lines 57-60
		$this->test(\Type::enumEq($this->value, $expected), $p, "Expected " . ($this->quote($expected)??'null') . ", was " . ($this->quote($this->value)??'null'), "Didn't expect " . ($this->quote($this->value)??'null') . " but was equal to that");
	}

	/**
	 * @return ShouldEnum
	 */
	public function get_not () {
		#C:\HaxeToolkit\haxe\lib\buddy/2,10,2/buddy/Should.hx:46: characters 31-69
		return new ShouldEnum($this->value, !$this->inverse);
	}
}

Boot::registerClass(ShouldEnum::class, 'buddy.ShouldEnum');
Boot::registerGetters('buddy\\ShouldEnum', [
	'not' => true
]);
