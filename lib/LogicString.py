# Generated by Haxe 4.0.0-rc.2+77068e10c
# coding: utf-8

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class Class: pass


class Token:
    _hx_class_name = "Token"
    __slots__ = ("type", "literal")
    _hx_fields = ["type", "literal"]
    _hx_methods = ["precedence", "toString"]

    def __init__(self,_hx_type,literal = None):
        self.type = _hx_type
        self.literal = literal

    def precedence(self):
        tmp = self.type.index
        if ((tmp == 3) or ((tmp == 0))):
            return 2
        elif ((tmp == 2) or ((tmp == 1))):
            return 1
        else:
            return 0

    def toString(self):
        if (self.type == Syntax.LITERAL):
            return (("LITERAL(" + HxOverrides.stringOrNull(self.literal)) + ")")
        return Std.string(self.type)



class Node:
    _hx_class_name = "Node"
    __slots__ = ("token", "left", "right")
    _hx_fields = ["token", "left", "right"]
    _hx_methods = ["toString", "fancyString", "check"]

    def __init__(self,token):
        self.right = None
        self.left = None
        self.token = token

    def toString(self):
        return self.fancyString()

    def fancyString(self,f = None):
        s = None
        if (f is not None):
            s = f(self)
        if (s is not None):
            return s
        tmp = self.token.type.index
        if (tmp == 3):
            return (("NOT(" + Std.string(self.right)) + ")")
        elif (tmp == 6):
            return (("{" + HxOverrides.stringOrNull(self.token.literal)) + "}")
        else:
            return (((((("(" + Std.string(self.left)) + " ") + Std.string(self.token.type)) + " ") + Std.string(self.right)) + ")")

    def check(self,a,f):
        tmp = self.token.type.index
        if (tmp == 0):
            if self.left.check(a,f):
                return self.right.check(a,f)
            else:
                return False
        elif (tmp == 1):
            if (not self.left.check(a,f)):
                return self.right.check(a,f)
            else:
                return True
        elif (tmp == 2):
            l = self.left.check(a,f)
            r = self.right.check(a,f)
            if (not (((not l) and r))):
                if l:
                    return (not r)
                else:
                    return False
            else:
                return True
        elif (tmp == 3):
            return (not self.right.check(a,f))
        elif (tmp == 6):
            return f(a,self.token.literal)
        else:
            raise _HxException("Unexpected token encountered.")


class Syntax(Enum):
    __slots__ = ()
    _hx_class_name = "Syntax"
    _hx_constructs = ["AND", "OR", "XOR", "NOT", "OPEN", "CLOSE", "LITERAL"]
Syntax.AND = Syntax("AND", 0, list())
Syntax.OR = Syntax("OR", 1, list())
Syntax.XOR = Syntax("XOR", 2, list())
Syntax.NOT = Syntax("NOT", 3, list())
Syntax.OPEN = Syntax("OPEN", 4, list())
Syntax.CLOSE = Syntax("CLOSE", 5, list())
Syntax.LITERAL = Syntax("LITERAL", 6, list())


class LogicString:
    _hx_class_name = "LogicString"
    __slots__ = ("logictree", "syntax", "quotations", "caseSensitive")
    _hx_fields = ["logictree", "syntax", "quotations", "caseSensitive"]
    _hx_methods = ["parse", "stringify", "filterFunction", "tree", "shunt", "tentativelyLower", "tokenize", "tokenType", "typeize"]

    def __init__(self,custom_syntax):
        self.logictree = None
        self.caseSensitive = True
        self.quotations = ["\"", "'"]
        _g = haxe_ds_EnumValueMap()
        _g.set(Syntax.AND,"AND")
        _g.set(Syntax.OR,"OR")
        _g.set(Syntax.XOR,"XOR")
        _g.set(Syntax.NOT,"NOT")
        _g.set(Syntax.OPEN,"(")
        _g.set(Syntax.CLOSE,")")
        self.syntax = _g
        key = custom_syntax.keys()
        while key.hasNext():
            key1 = key.next()
            if self.syntax.exists(key1):
                self.syntax.set(key1,custom_syntax.get(key1))

    def parse(self,logic_string):
        print(str(logic_string))
        tokens = self.tokenize(logic_string)
        print(str(tokens))
        types = self.typeize(tokens)
        print(str(types))
        reversepolish = self.shunt(types)
        print(str(reversepolish))
        tree = self.tree(reversepolish)
        self.logictree = tree
        return tree

    def stringify(self,f):
        return self.logictree.fancyString(f)

    def filterFunction(self,f):
        enclosed = self.logictree
        def _hx_local_0(a):
            return enclosed.check(a,f)
        return _hx_local_0

    def tree(self,tokens):
        stack = haxe_ds_GenericStack()
        _g = 0
        _g1 = len(tokens)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            token = (tokens[i] if i >= 0 and i < len(tokens) else None)
            n = Node(token)
            if (token.type != Syntax.LITERAL):
                if (stack.head is None):
                    raise _HxException((("An '" + HxOverrides.stringOrNull(self.syntax.get(token.type))) + "' is missing a value to operate on (on its right)."))
                k = stack.head
                tmp = None
                if (k is None):
                    tmp = None
                else:
                    stack.head = k.next
                    tmp = k.elt
                n.right = tmp
                if (token.type != Syntax.NOT):
                    if (stack.head is None):
                        raise _HxException((("An '" + HxOverrides.stringOrNull(self.syntax.get(token.type))) + "' is missing a value to operate on (on its left)."))
                    k1 = stack.head
                    tmp1 = None
                    if (k1 is None):
                        tmp1 = None
                    else:
                        stack.head = k1.next
                        tmp1 = k1.elt
                    n.left = tmp1
            stack.head = haxe_ds_GenericCell(n,stack.head)
        k2 = stack.head
        parsetree = None
        if (k2 is None):
            parsetree = None
        else:
            stack.head = k2.next
            parsetree = k2.elt
        parsetree1 = parsetree
        if (stack.head is not None):
            print(str(stack))
            raise _HxException("I expected the stack to be empty but it's not!")
        return parsetree1

    def shunt(self,tokens):
        output = list()
        operators = haxe_ds_GenericStack()
        print("Reverse polish:")
        _g = 0
        _g1 = len(tokens)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            print(":::")
            print(str(output))
            print(str(operators))
            token = (tokens[i] if i >= 0 and i < len(tokens) else None)
            tmp = token.type.index
            if (tmp == 4):
                operators.head = haxe_ds_GenericCell(token,operators.head)
            elif (tmp == 5):
                while True:
                    k = operators.head
                    op = None
                    if (k is None):
                        op = None
                    else:
                        operators.head = k.next
                        op = k.elt
                    op1 = op
                    if (op1.type == Syntax.OPEN):
                        break
                    if (operators.head is None):
                        raise _HxException("Mismatched parentheses.")
                    output.append(op1)
            elif (tmp == 6):
                output.append(token)
            else:
                while (operators.head is not None):
                    prev = (None if ((operators.head is None)) else operators.head.elt)
                    if (prev.type == Syntax.OPEN):
                        break
                    if (prev.precedence() <= token.precedence()):
                        break
                    k1 = operators.head
                    x = None
                    if (k1 is None):
                        x = None
                    else:
                        operators.head = k1.next
                        x = k1.elt
                    output.append(x)
                operators.head = haxe_ds_GenericCell(token,operators.head)
        while (operators.head is not None):
            k2 = operators.head
            o = None
            if (k2 is None):
                o = None
            else:
                operators.head = k2.next
                o = k2.elt
            o1 = o
            if (o1.type == Syntax.OPEN):
                raise _HxException("Mismatched parentheses.")
            output.append(o1)
        return output

    def tentativelyLower(self,s):
        if self.caseSensitive:
            return s
        else:
            return Std.string(s).lower()

    def tokenize(self,_hx_str):
        tokens = []
        _g = []
        x = self.syntax.iterator()
        while x.hasNext():
            x1 = x.next()
            x2 = self.tentativelyLower(x1)
            _g.append(x2)
        keys = _g
        quotation = None
        current = ""
        _g1 = 0
        _g2 = len(_hx_str)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(_hx_str))))) else _hx_str[i])
            if (python_internal_ArrayImpl.indexOf(keys,self.tentativelyLower(c),None) == -1):
                if (python_internal_ArrayImpl.indexOf(self.quotations,c,None) != -1):
                    if (quotation is None):
                        quotation = c
                    elif (quotation == c):
                        quotation = None
                if (StringTools.isSpace(c,0) and ((quotation is None))):
                    if (len(current) > 0):
                        tokens.append(current)
                    current = ""
                else:
                    current = (("null" if current is None else current) + ("null" if c is None else c))
            else:
                if (len(current) > 0):
                    tokens.append(current)
                current = ""
                tokens.append(c)
        if (len(StringTools.trim(current)) > 0):
            x3 = StringTools.trim(current)
            tokens.append(x3)
        return tokens

    def tokenType(self,token):
        key = self.syntax.keys()
        while key.hasNext():
            key1 = key.next()
            if (self.tentativelyLower(token) == self.tentativelyLower(self.syntax.get(key1))):
                return Token(key1)
        return Token(Syntax.LITERAL,token)

    def typeize(self,tokens):
        _g = []
        _g1 = 0
        _g2 = len(tokens)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            x = self.tokenType((tokens[i] if i >= 0 and i < len(tokens) else None))
            _g.append(x)
        return _g



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["compare", "isEnumValue"]

    @staticmethod
    def compare(a,b):
        if ((a is None) and ((b is None))):
            return 0
        if (a is None):
            return 1
        elif (b is None):
            return -1
        elif HxOverrides.eq(a,b):
            return 0
        elif (a > b):
            return 1
        else:
            return -1

    @staticmethod
    def isEnumValue(v):
        if not HxOverrides.eq(v,Enum):
            return isinstance(v,Enum)
        else:
            return False


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["is", "string"]

    @staticmethod
    def _hx_is(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if (t == Dynamic):
            return (v is not None)
        isBool = isinstance(v,bool)
        if ((t == Bool) and isBool):
            return True
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp2 = None
            try:
                tmp2 = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp2 = None
            tmp = (v == tmp2)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        if (t == str):
            return isinstance(v,str)
        isEnumType = (t == Enum)
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = (t == Class)
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp3 = None
        try:
            tmp3 = isinstance(v,t)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp3 = False
        if tmp3:
            return True
        if python_lib_Inspect.isclass(t):
            loop = None
            def _hx_local_1(intf):
                f1 = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f1 is not None):
                    _g = 0
                    while (_g < len(f1)):
                        i = (f1[_g] if _g >= 0 and _g < len(f1) else None)
                        _g = (_g + 1)
                        if HxOverrides.eq(i,t):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            while (currentClass is not None):
                if loop(currentClass):
                    return True
                currentClass = python_Boot.getSuperClass(currentClass)
            return False
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["isSpace", "ltrim", "rtrim", "trim"]

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
    _hx_methods = ["toString"]


class haxe_ds_BalancedTree:
    _hx_class_name = "haxe.ds.BalancedTree"
    __slots__ = ("root",)
    _hx_fields = ["root"]
    _hx_methods = ["set", "get", "exists", "iterator", "keys", "setLoop", "iteratorLoop", "keysLoop", "balance", "compare", "toString"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.root = None

    def set(self,key,value):
        self.root = self.setLoop(key,value,self.root)

    def get(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return node.value
            if (c < 0):
                node = node.left
            else:
                node = node.right
        return None

    def exists(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return True
            elif (c < 0):
                node = node.left
            else:
                node = node.right
        return False

    def iterator(self):
        ret = []
        self.iteratorLoop(self.root,ret)
        return python_HaxeIterator(ret.__iter__())

    def keys(self):
        ret = []
        self.keysLoop(self.root,ret)
        return python_HaxeIterator(ret.__iter__())

    def setLoop(self,k,v,node):
        if (node is None):
            return haxe_ds_TreeNode(None,k,v,None)
        c = self.compare(k,node.key)
        if (c == 0):
            return haxe_ds_TreeNode(node.left,k,v,node.right,(0 if ((node is None)) else node._height))
        elif (c < 0):
            nl = self.setLoop(k,v,node.left)
            return self.balance(nl,node.key,node.value,node.right)
        else:
            nr = self.setLoop(k,v,node.right)
            return self.balance(node.left,node.key,node.value,nr)

    def iteratorLoop(self,node,acc):
        if (node is not None):
            self.iteratorLoop(node.left,acc)
            x = node.value
            acc.append(x)
            self.iteratorLoop(node.right,acc)

    def keysLoop(self,node,acc):
        if (node is not None):
            self.keysLoop(node.left,acc)
            x = node.key
            acc.append(x)
            self.keysLoop(node.right,acc)

    def balance(self,l,k,v,r):
        hl = (0 if ((l is None)) else l._height)
        hr = (0 if ((r is None)) else r._height)
        if (hl > ((hr + 2))):
            _this = l.left
            _this1 = l.right
            if (((0 if ((_this is None)) else _this._height)) >= ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(l.left,l.key,l.value,haxe_ds_TreeNode(l.right,k,v,r))
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,haxe_ds_TreeNode(l.right.right,k,v,r))
        elif (hr > ((hl + 2))):
            _this2 = r.right
            _this3 = r.left
            if (((0 if ((_this2 is None)) else _this2._height)) > ((0 if ((_this3 is None)) else _this3._height))):
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right)
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right))
        else:
            return haxe_ds_TreeNode(l,k,v,r,(((hl if ((hl > hr)) else hr)) + 1))

    def compare(self,k1,k2):
        return Reflect.compare(k1,k2)

    def toString(self):
        if (self.root is None):
            return "{}"
        else:
            return (("{" + HxOverrides.stringOrNull(self.root.toString())) + "}")



class haxe_ds_TreeNode:
    _hx_class_name = "haxe.ds.TreeNode"
    __slots__ = ("left", "right", "key", "value", "_height")
    _hx_fields = ["left", "right", "key", "value", "_height"]
    _hx_methods = ["toString"]

    def __init__(self,l,k,v,r,h = -1):
        if (h is None):
            h = -1
        self._height = None
        self.left = l
        self.key = k
        self.value = v
        self.right = r
        if (h == -1):
            tmp = None
            _this = self.left
            _this1 = self.right
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                _this2 = self.left
                tmp = (0 if ((_this2 is None)) else _this2._height)
            else:
                _this3 = self.right
                tmp = (0 if ((_this3 is None)) else _this3._height)
            self._height = (tmp + 1)
        else:
            self._height = h

    def toString(self):
        return ((HxOverrides.stringOrNull((("" if ((self.left is None)) else (HxOverrides.stringOrNull(self.left.toString()) + ", ")))) + (((("" + Std.string(self.key)) + "=") + Std.string(self.value)))) + HxOverrides.stringOrNull((("" if ((self.right is None)) else (", " + HxOverrides.stringOrNull(self.right.toString()))))))



class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):
    _hx_class_name = "haxe.ds.EnumValueMap"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["compare", "compareArgs", "compareArg"]
    _hx_statics = []
    _hx_interfaces = [haxe_IMap]
    _hx_super = haxe_ds_BalancedTree


    def __init__(self):
        super().__init__()

    def compare(self,k1,k2):
        d = (k1.index - k2.index)
        if (d != 0):
            return d
        p1 = k1.params
        p2 = k2.params
        if ((len(p1) == 0) and ((len(p2) == 0))):
            return 0
        return self.compareArgs(p1,p2)

    def compareArgs(self,a1,a2):
        ld = (len(a1) - len(a2))
        if (ld != 0):
            return ld
        _g = 0
        _g1 = len(a1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            d = self.compareArg((a1[i] if i >= 0 and i < len(a1) else None),(a2[i] if i >= 0 and i < len(a2) else None))
            if (d != 0):
                return d
        return 0

    def compareArg(self,v1,v2):
        if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)):
            return self.compare(v1,v2)
        elif (Std._hx_is(v1,list) and Std._hx_is(v2,list)):
            return self.compareArgs(v1,v2)
        else:
            return Reflect.compare(v1,v2)



class haxe_ds_GenericCell:
    _hx_class_name = "haxe.ds.GenericCell"
    __slots__ = ("elt", "next")
    _hx_fields = ["elt", "next"]

    def __init__(self,elt,next):
        self.elt = elt
        self.next = next



class haxe_ds_GenericStack:
    _hx_class_name = "haxe.ds.GenericStack"
    __slots__ = ("head",)
    _hx_fields = ["head"]

    def __init__(self):
        self.head = None



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g3 = 0
                    _g12 = l1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                return list(o._hx_fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class _hx_AnonObject:
    _hx_class_name = "_hx_AnonObject"
    __slots__ = ()


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["indexOf", "_get"]

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["charCodeAt", "substr"]

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")