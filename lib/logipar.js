// Generated by Haxe 4.0.0-rc.2+77068e10c
(function ($hx_exports) { "use strict";
$hx_exports["logipar"] = $hx_exports["logipar"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && v1.__enum__ == null && (((v2) instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = true;
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var logipar_Logipar = $hx_exports["logipar"]["Logipar"] = function(custom_syntax) {
	var _g = new haxe_ds_EnumValueMap();
	_g.set(logipar_Syntax.AND,"AND");
	_g.set(logipar_Syntax.OR,"OR");
	_g.set(logipar_Syntax.XOR,"XOR");
	_g.set(logipar_Syntax.NOT,"NOT");
	_g.set(logipar_Syntax.OPEN,"(");
	_g.set(logipar_Syntax.CLOSE,")");
	this.syntax = _g;
	this.caseSensitive = true;
	this.quotations = ["\"","'"];
	var key = custom_syntax.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		if(this.syntax.exists(key1)) {
			this.syntax.set(key1,custom_syntax.get(key1));
		}
	}
};
logipar_Logipar.__name__ = true;
logipar_Logipar.prototype = {
	parse: function(logic_string) {
		var tokens = this.tokenize(logic_string);
		var types = this.typeize(tokens);
		var reversepolish = this.shunt(types);
		this.tree = this.treeify(reversepolish);
		return this.tree;
	}
	,stringify: function(f) {
		return this.tree.fancyString(f);
	}
	,filterFunction: function(f) {
		var enclosed = this.tree;
		return function(a) {
			return enclosed.check(a,f);
		};
	}
	,treeify: function(tokens) {
		var stack = new haxe_ds_GenericStack();
		var _g = 0;
		var _g1 = tokens.length;
		while(_g < _g1) {
			var i = _g++;
			var token = tokens[i];
			var n = new logipar_Node(token);
			if(token.type != logipar_Syntax.LITERAL) {
				if(stack.head == null) {
					throw new js__$Boot_HaxeError("An '" + this.syntax.get(token.type) + "' is missing a value to operate on (on its right).");
				}
				var k = stack.head;
				var tmp;
				if(k == null) {
					tmp = null;
				} else {
					stack.head = k.next;
					tmp = k.elt;
				}
				n.right = tmp;
				if(token.type != logipar_Syntax.NOT) {
					if(stack.head == null) {
						throw new js__$Boot_HaxeError("An '" + this.syntax.get(token.type) + "' is missing a value to operate on (on its left).");
					}
					var k1 = stack.head;
					var tmp1;
					if(k1 == null) {
						tmp1 = null;
					} else {
						stack.head = k1.next;
						tmp1 = k1.elt;
					}
					n.left = tmp1;
				}
			}
			stack.head = new haxe_ds_GenericCell(n,stack.head);
		}
		var k2 = stack.head;
		var parsetree;
		if(k2 == null) {
			parsetree = null;
		} else {
			stack.head = k2.next;
			parsetree = k2.elt;
		}
		var parsetree1 = parsetree;
		if(stack.head != null) {
			throw new js__$Boot_HaxeError("Uhoh, the stack isn't empty.  Do you have neighbouring literals?");
		}
		return parsetree1;
	}
	,shunt: function(tokens) {
		var output = [];
		var operators = new haxe_ds_GenericStack();
		var _g = 0;
		var _g1 = tokens.length;
		while(_g < _g1) {
			var i = _g++;
			var token = tokens[i];
			switch(token.type._hx_index) {
			case 4:
				operators.head = new haxe_ds_GenericCell(token,operators.head);
				break;
			case 5:
				while(true) {
					var k = operators.head;
					var op;
					if(k == null) {
						op = null;
					} else {
						operators.head = k.next;
						op = k.elt;
					}
					var op1 = op;
					if(op1.type == logipar_Syntax.OPEN) {
						break;
					}
					if(operators.head == null) {
						throw new js__$Boot_HaxeError("Mismatched parentheses.");
					}
					output.push(op1);
				}
				break;
			case 6:
				output.push(token);
				break;
			default:
				while(operators.head != null) {
					var prev = operators.head == null ? null : operators.head.elt;
					if(prev.type == logipar_Syntax.OPEN) {
						break;
					}
					if(prev.precedence() <= token.precedence()) {
						break;
					}
					var k1 = operators.head;
					var tmp;
					if(k1 == null) {
						tmp = null;
					} else {
						operators.head = k1.next;
						tmp = k1.elt;
					}
					output.push(tmp);
				}
				operators.head = new haxe_ds_GenericCell(token,operators.head);
			}
		}
		while(operators.head != null) {
			var k2 = operators.head;
			var o;
			if(k2 == null) {
				o = null;
			} else {
				operators.head = k2.next;
				o = k2.elt;
			}
			var o1 = o;
			if(o1.type == logipar_Syntax.OPEN) {
				throw new js__$Boot_HaxeError("Mismatched parentheses.");
			}
			output.push(o1);
		}
		return output;
	}
	,tentativelyLower: function(s) {
		if(this.caseSensitive) {
			return s;
		} else {
			return (s == null ? "null" : "" + s).toLowerCase();
		}
	}
	,tokenize: function(str) {
		var tokens = [];
		var _g = [];
		var x = this.syntax.iterator();
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(this.tentativelyLower(x1));
		}
		var keys = _g;
		var quotation = null;
		var current = "";
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var c = str.charAt(i);
			if(keys.indexOf(this.tentativelyLower(c)) == -1) {
				if(this.quotations.indexOf(c) != -1) {
					if(quotation == null) {
						quotation = c;
					} else if(quotation == c) {
						quotation = null;
					}
				}
				if(StringTools.isSpace(c,0) && quotation == null) {
					if(current.length > 0) {
						tokens.push(current);
					}
					current = "";
				} else {
					current += c;
				}
			} else {
				if(current.length > 0) {
					tokens.push(current);
				}
				current = "";
				tokens.push(c);
			}
		}
		if(StringTools.trim(current).length > 0) {
			tokens.push(StringTools.trim(current));
		}
		return tokens;
	}
	,tokenType: function(token) {
		var key = this.syntax.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(this.tentativelyLower(token) == this.tentativelyLower(this.syntax.get(key1))) {
				return new logipar_Token(key1);
			}
		}
		return new logipar_Token(logipar_Syntax.LITERAL,token);
	}
	,typeize: function(tokens) {
		var _g = [];
		var _g1 = 0;
		var _g2 = tokens.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.tokenType(tokens[i]));
		}
		return _g;
	}
};
var logipar_Node = function(token) {
	this.token = token;
};
logipar_Node.__name__ = true;
logipar_Node.prototype = {
	toString: function() {
		return this.fancyString();
	}
	,fancyString: function(f) {
		var s = null;
		if(f != null) {
			s = f(this);
		}
		if(s != null) {
			return s;
		}
		switch(this.token.type._hx_index) {
		case 3:
			return "NOT(" + Std.string(this.right) + ")";
		case 6:
			return "{" + this.token.literal + "}";
		default:
			return "(" + Std.string(this.left) + " " + Std.string(this.token.type) + " " + Std.string(this.right) + ")";
		}
	}
	,check: function(a,f) {
		switch(this.token.type._hx_index) {
		case 0:
			if(this.left.check(a,f)) {
				return this.right.check(a,f);
			} else {
				return false;
			}
			break;
		case 1:
			if(!this.left.check(a,f)) {
				return this.right.check(a,f);
			} else {
				return true;
			}
			break;
		case 2:
			var l = this.left.check(a,f);
			var r = this.right.check(a,f);
			if(!(!l && r)) {
				if(l) {
					return !r;
				} else {
					return false;
				}
			} else {
				return true;
			}
			break;
		case 3:
			return !this.right.check(a,f);
		case 6:
			return f(a,this.token.literal);
		default:
			throw new js__$Boot_HaxeError("Unexpected token encountered.");
		}
	}
};
var logipar_Syntax = $hxEnums["logipar.Syntax"] = { __ename__ : true, __constructs__ : ["AND","OR","XOR","NOT","OPEN","CLOSE","LITERAL"]
	,AND: {_hx_index:0,__enum__:"logipar.Syntax",toString:$estr}
	,OR: {_hx_index:1,__enum__:"logipar.Syntax",toString:$estr}
	,XOR: {_hx_index:2,__enum__:"logipar.Syntax",toString:$estr}
	,NOT: {_hx_index:3,__enum__:"logipar.Syntax",toString:$estr}
	,OPEN: {_hx_index:4,__enum__:"logipar.Syntax",toString:$estr}
	,CLOSE: {_hx_index:5,__enum__:"logipar.Syntax",toString:$estr}
	,LITERAL: {_hx_index:6,__enum__:"logipar.Syntax",toString:$estr}
};
var logipar_Token = function(type,literal) {
	this.type = type;
	this.literal = literal;
};
logipar_Token.__name__ = true;
logipar_Token.prototype = {
	precedence: function() {
		switch(this.type._hx_index) {
		case 0:case 3:
			return 2;
		case 1:case 2:
			return 1;
		default:
			return 0;
		}
	}
	,toString: function() {
		if(this.type == logipar_Syntax.LITERAL) {
			return "LITERAL(" + this.literal + ")";
		}
		return Std.string(this.type);
	}
};
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
