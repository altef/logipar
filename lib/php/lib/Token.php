<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

use \php\Boot;

class Token {
	/**
	 * @var string
	 */
	public $literal;
	/**
	 * @var \Syntax
	 */
	public $type;

	/**
	 * @param \Syntax $type
	 * @param string $literal
	 * 
	 * @return void
	 */
	public function __construct ($type, $literal = null) {
		#src/LogicString.hx:11: characters 3-19
		$this->type = $type;
		#src/LogicString.hx:12: characters 3-25
		$this->literal = $literal;
	}

	/**
	 * @return int
	 */
	public function precedence () {
		#src/LogicString.hx:16: characters 10-14
		$__hx__switch = ($this->type->index);
		if ($__hx__switch === 0 || $__hx__switch === 3) {
			#src/LogicString.hx:18: characters 5-13
			return 2;
		} else if ($__hx__switch === 1 || $__hx__switch === 2) {
			#src/LogicString.hx:20: characters 5-13
			return 1;
		} else {
			#src/LogicString.hx:22: characters 5-13
			return 0;
		}
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/LogicString.hx:27: lines 27-28
		if ($this->type === \Syntax::LITERAL()) {
			#src/LogicString.hx:28: characters 4-42
			return "LITERAL(" . ($this->literal??'null') . ")";
		}
		#src/LogicString.hx:29: characters 3-31
		return \Std::string($this->type);
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Token::class, 'Token');
