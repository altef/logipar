<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\IMap;

/**
 * BalancedTree allows key-value mapping with arbitrary keys, as long as they
 * can be ordered. By default, `Reflect.compare` is used in the `compare`
 * method, which can be overridden in subclasses.
 * Operations have a logarithmic average and worst-case cost.
 * Iteration over keys and values, using `keys` and `iterator` respectively,
 * are in-order.
 */
class BalancedTree implements IMap {
	/**
	 * @var TreeNode
	 */
	public $root;

	/**
	 * Creates a new BalancedTree, which is initially empty.
	 * 
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param TreeNode $l
	 * @param mixed $k
	 * @param mixed $v
	 * @param TreeNode $r
	 * 
	 * @return TreeNode
	 */
	public function balance ($l, $k, $v, $r) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:201: characters 3-27
		$hl = ($l === null ? 0 : $l->_height);
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:202: characters 3-27
		$hr = ($r === null ? 0 : $r->_height);
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:203: lines 203-211
		if ($hl > ($hr + 2)) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 8-27
			$_this = $l->left;
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 31-51
			$_this1 = $l->right;
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: lines 204-205
			if ((($_this === null ? 0 : $_this->_height)) >= (($_this1 === null ? 0 : $_this1->_height))) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 71-77
				$l1 = $l->left;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 79-84
				$l2 = $l->key;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 86-93
				$l3 = $l->value;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:204: characters 53-131
				return new TreeNode($l1, $l2, $l3, new TreeNode($l->right, $k, $v, $r));
			} else {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:205: characters 27-81
				$tmp = new TreeNode($l->left, $l->key, $l->value, $l->right->left);
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:205: characters 83-94
				$l4 = $l->right->key;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:205: characters 96-109
				$l5 = $l->right->value;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:205: characters 9-153
				return new TreeNode($tmp, $l4, $l5, new TreeNode($l->right->right, $k, $v, $r));
			}
		} else if ($hr > ($hl + 2)) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:207: characters 8-28
			$_this2 = $r->right;
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:207: characters 31-50
			$_this3 = $r->left;
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:207: lines 207-208
			if ((($_this2 === null ? 0 : $_this2->_height)) > (($_this3 === null ? 0 : $_this3->_height))) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:207: characters 52-130
				return new TreeNode(new TreeNode($l, $k, $v, $r->left), $r->key, $r->value, $r->right);
			} else {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:208: characters 27-66
				$tmp1 = new TreeNode($l, $k, $v, $r->left->left);
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:208: characters 68-78
				$r1 = $r->left->key;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:208: characters 80-92
				$r2 = $r->left->value;
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:208: characters 9-151
				return new TreeNode($tmp1, $r1, $r2, new TreeNode($r->left->right, $r->key, $r->value, $r->right));
			}
		} else {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:210: characters 4-58
			return new TreeNode($l, $k, $v, $r, (($hl > $hr ? $hl : $hr)) + 1);
		}
	}

	/**
	 * @param mixed $k1
	 * @param mixed $k2
	 * 
	 * @return int
	 */
	public function compare ($k1, $k2) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:215: characters 3-33
		return \Reflect::compare($k1, $k2);
	}

	/**
	 * Tells if `key` is bound to a value.
	 * This method returns true even if `key` is bound to null.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:100: characters 3-19
		$node = $this->root;
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:101: lines 101-106
		while ($node !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:102: characters 4-35
			$c = $this->compare($key, $node->key);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:103: lines 103-105
			if ($c === 0) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:103: characters 16-27
				return true;
			} else if ($c < 0) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:104: characters 20-36
				$node = $node->left;
			} else {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:105: characters 9-26
				$node = $node->right;
			}
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:107: characters 3-15
		return false;
	}

	/**
	 * Returns the value `key` is bound to.
	 * If `key` is not bound to any value, `null` is returned.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function get ($key) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:62: characters 3-19
		$node = $this->root;
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:63: lines 63-68
		while ($node !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:64: characters 4-35
			$c = $this->compare($key, $node->key);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:65: characters 4-33
			if ($c === 0) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:65: characters 16-33
				return $node->value;
			}
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:66: lines 66-67
			if ($c < 0) {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:66: characters 15-31
				$node = $node->left;
			} else {
				#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:67: characters 9-26
				$node = $node->right;
			}
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:69: characters 3-14
		return null;
	}

	/**
	 * Iterates over the bound values of `this` BalancedTree.
	 * This operation is performed in-order.
	 * 
	 * @return object
	 */
	public function iterator () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:116: characters 3-16
		$ret = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:117: characters 3-26
		$this->iteratorLoop($this->root, $ret);
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:118: characters 3-24
		return $ret->iterator();
	}

	/**
	 * @param TreeNode $node
	 * @param \Array_hx $acc
	 * 
	 * @return void
	 */
	public function iteratorLoop ($node, $acc) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:167: lines 167-171
		if ($node !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:168: characters 4-32
			$this->iteratorLoop($node->left, $acc);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:169: characters 4-24
			$acc->arr[$acc->length] = $node->value;
			++$acc->length;

			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:170: characters 4-33
			$this->iteratorLoop($node->right, $acc);
		}
	}

	/**
	 * Iterates over the keys of `this` BalancedTree.
	 * This operation is performed in-order.
	 * 
	 * @return object
	 */
	public function keys () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:134: characters 3-16
		$ret = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:135: characters 3-22
		$this->keysLoop($this->root, $ret);
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:136: characters 3-24
		return $ret->iterator();
	}

	/**
	 * @param TreeNode $node
	 * @param \Array_hx $acc
	 * 
	 * @return void
	 */
	public function keysLoop ($node, $acc) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:175: lines 175-179
		if ($node !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:176: characters 4-28
			$this->keysLoop($node->left, $acc);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:177: characters 4-22
			$acc->arr[$acc->length] = $node->key;
			++$acc->length;

			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:178: characters 4-29
			$this->keysLoop($node->right, $acc);
		}
	}

	/**
	 * Binds `key` to `value`.
	 * If `key` is already bound to a value, that binding disappears.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param mixed $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:51: characters 3-35
		$this->root = $this->setLoop($key, $value, $this->root);
	}

	/**
	 * @param mixed $k
	 * @param mixed $v
	 * @param TreeNode $node
	 * 
	 * @return TreeNode
	 */
	public function setLoop ($k, $v, $node) {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:146: characters 3-63
		if ($node === null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:146: characters 21-63
			return new TreeNode(null, $k, $v, null);
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:147: characters 3-32
		$c = $this->compare($k, $node->key);
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:148: lines 148-155
		if ($c === 0) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:148: characters 22-87
			return new TreeNode($node->left, $k, $v, $node->right, ($node === null ? 0 : $node->_height));
		} else if ($c < 0) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:150: characters 4-38
			$nl = $this->setLoop($k, $v, $node->left);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:151: characters 4-49
			return $this->balance($nl, $node->key, $node->value, $node->right);
		} else {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:153: characters 4-39
			$nr = $this->setLoop($k, $v, $node->right);
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:154: characters 4-48
			return $this->balance($node->left, $node->key, $node->value, $nr);
		}
	}

	/**
	 * @return string
	 */
	public function toString () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:219: characters 10-54
		if ($this->root === null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:219: characters 26-28
			return "{}";
		} else {
			#C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx:219: characters 33-53
			return "{" . ($this->root->toString()??'null') . "}";
		}
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(BalancedTree::class, 'haxe.ds.BalancedTree');
