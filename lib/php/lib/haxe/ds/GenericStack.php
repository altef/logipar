<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e10c
 */

namespace haxe\ds;

use \php\Boot;

/**
 * A stack of elements.
 * This class is generic, which means one type is generated for each type
 * parameter T on static targets. For example:
 * - `new GenericStack<Int>()` generates `GenericStack_Int`
 * - `new GenericStack<String>()` generates `GenericStack_String`
 * The generated name is an implementation detail and should not be relied
 * upon.
 * @see https://haxe.org/manual/std-GenericStack.html
 */
class GenericStack {
	/**
	 * @var GenericCell
	 */
	public $head;

	/**
	 * Creates a new empty GenericStack.
	 * 
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * Returns a String representation of `this` GenericStack.
	 * 
	 * @return string
	 */
	public function toString () {
		#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:185: characters 3-23
		$a = new \Array_hx();
		#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:186: characters 3-16
		$l = $this->head;
		#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:187: lines 187-190
		while ($l !== null) {
			#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:188: characters 4-17
			$a->arr[$a->length] = $l->elt;
			++$a->length;

			#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:189: characters 4-14
			$l = $l->next;
		}
		#C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx:191: characters 3-29
		return "{" . ($a->join(",")??'null') . "}";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(GenericStack::class, 'haxe.ds.GenericStack');
